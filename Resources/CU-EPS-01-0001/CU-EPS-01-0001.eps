%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: CU-EPS-02-0001.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Ted
%%CreationDate: 7/5/2013
%%BoundingBox: 0 0 720 540
%%HiResBoundingBox: 0 0 720 540
%%CropBox: 0 0 720 540
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2013-07-05T15:30:52-07:00</xap:CreateDate>
         <xap:ModifyDate>2013-07-05T15:30:53-07:00</xap:ModifyDate>
         <xap:MetadataDate>2013-07-05T15:30:53-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9QYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhb7VNNsEL3t1FbqBy/eOFJHsDucVYlffm15e&#xA;gmeK3hnughIEqhVRqeHI8vwxVINX/N/UZQE0u1S2X9qWY+o5+QFFH44qgYfzY80pxEgt5QDViYyC&#xA;RXp8LAYqim/NzVJElElogLGkYjcoFWhqa0Zi9ehrT2xVG6V+aqtFJ+kHkimUUi/dpLG1QN34eiwI&#xA;PhtTFWV6F520jVSUSQKygln6JQU3IPxJWvfb3OKsixV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KsW8/ebZvL+nxi2UG8u+SwuaEJxpVuJ6/a2xV4vcXN7ezmSeSS4mN&#xA;TyYlzQbn6BirMPJv5cXOqlbzVFe304qGiUEB5d6U3qVXbrTftir0X/BflgEt+jbdtqcTGoG1elAP&#xA;H8MVecedF063jawXyy2nXh+OK6WTkpVSORAUFWH07Yqwvg3DnQ8K05dq+GKtYqqW9xNb3EdxC3CW&#xA;Jg8beDKag74q9F0v8z9Jh0+GO5tLmO4jFGjgcmE7qQV5yhgKL9npiqa2Hnw6neBdPvrdOTr/AKFe&#xA;wtDI9aDhFIjyL8R8QTX2xVkeleY7a8mFlcL9U1VQTNYsQxQgnYMPhb4fiFO3yNFU3xV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Koe/F+bVxYNEt1t6bThjGN96hSD0xViet+SNY1q&#xA;8hj1DVWk09F9SQKiKfW3FIkA+FePdmY4qyTQ9Gt9H0qDTrZ2aKCtHanI8mLmtBTviqT+efMuo6Dp&#xA;yT2KRTSiRBL6pqVRuW5ReJoStK1xVX8m+aBrul/WpuMU4cxug4gcqDZRyZiNx1A64qnS3NrOkhSU&#xA;NGg+N0JAFK1+MeFN8VS1/LPlu+t39WxWRJ3MzmQOJGck/ESxD13+7FUBq35deXLywe3toFsZjQpP&#xA;FU0YdOSk0YYq821T8ufNNjLKI7U3cEdSs0JDclHgledfamKsdNpdLN6BhcT/AO+ip5/8DSuKrZoZ&#xA;oZGimRo5F+0jgqw77g4qnOj+Y5ba6t5Lqa4H1ccEuIHIm9Oob0mqwDx/D9knav0Yq9V8refNM1oJ&#xA;BJ/o9+QB6bUCSN/xWatvtXiTX59cVZPirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVQOqaHpGqqi6hax3Ijr6ZcbrXrQihxVXs7KzsoFgtIUghX7McahR+GKq+KuxV2KuxVRE&#xA;0BuPTNFnoeCtQMyihJXuVHIVxV53+b+mBorHUo4jVGeCeSnY0aOp8K8qYq8xxVUiubiEUileMc1k&#xA;orEDmleDbd15Gh7YqzPSfzX120h9O8jS/oRxd/gfiOoLKN/mRirMbX80/KssELzSSQTSGkkJRm9P&#xA;3LAUI+X3Yqy5HSRFdDVHAZT4g7jFV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KqVzawXKBJVqAeSMCQyt/MrChU+4xVDTWtzQIz/WrZx6U0MgSpRtmJOwNB22+n&#xA;YYqxO7/KPQZppZIbieAOSyIpUon+SAV5Ef7LFWLedfy9j0HT4r61uWmi5cJxLxU8mPw8AOu3Ue2K&#xA;sKxVUt5/QmWXgkhWtEkHJakEVI9uuKsusvzV8zW0KxMILgIOKtKrFvapDAnFWc+TvzAs9eY2twi2&#xA;moqKrHyqkg2qUJoa1/Z/E9lWW4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FULql1c2unz3FtbtdXCL+5t06sx2A7bVO/tirynVPK35i+YJjd38O9T6cDSIioD/&#xA;ACJy2H4+OKtw/lD5kcAyXFpHXqvOQsPuSn44qvn/ACf19Axhu7aUAVUEujH2+yR+OKoCH8rvN8gf&#xA;nbxQ8RUB5UPLelBwLfPemKsjtPychVUa51N/VAqwhjAAb/JZif1YqzrRNJg0jTINPgZnjgFObmrE&#xA;k1J9tz0xVHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWjWhoaHscVYrNonnx7hUj8wRRWHCMPS&#xA;2Vp6rEFko52+OReVetCaUoMVVbLQfN6QRm48wVuGkilmUQI6gDmZolZuNVdnFDxUinhsFW4dD85R&#xA;qIT5jEkQi4iV7SIy+p6qNyJBCn92GSlO9e2KrI9C88cD6vmVPVa1liLJZx8RcMhWKYKW6I7c+Peg&#xA;BOKrY9G/MIXUnLzFbNaemREv1JfV9QxleRbnxor0YfCfDt8Sqc6dZavBO73mom7jcMBCYo0CnmSp&#xA;VkCn7GzVrvuKdMVf/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:4DFD6EA7C0E5E211879BAA54D8E57441</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:1D3EB68DC2E5E211879BAA54D8E57441</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:4CFD6EA7C0E5E211879BAA54D8E57441</stRef:instanceID>
            <stRef:documentID>uuid:4BFD6EA7C0E5E211879BAA54D8E57441</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>720.000000</stDim:w>
            <stDim:h>540.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Roboto-Light</stFnt:fontName>
                  <stFnt:fontFamily>Roboto</stFnt:fontFamily>
                  <stFnt:fontFace>Light</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.00000; 2011</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Roboto-Light.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Maps</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Sea</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>204</xapG:red>
                           <xapG:green>219</xapG:green>
                           <xapG:blue>229</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>River</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>147</xapG:red>
                           <xapG:green>182</xapG:green>
                           <xapG:blue>198</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Land</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>244</xapG:red>
                           <xapG:green>244</xapG:green>
                           <xapG:blue>244</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Country</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>249</xapG:red>
                           <xapG:green>241</xapG:green>
                           <xapG:blue>228</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Border</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>163</xapG:red>
                           <xapG:green>163</xapG:green>
                           <xapG:blue>163</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Marker</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>188</xapG:red>
                           <xapG:green>81</xapG:green>
                           <xapG:blue>81</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Text</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>51</xapG:red>
                           <xapG:green>51</xapG:green>
                           <xapG:blue>51</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
720 540 li
720 0 li
cp
clp
[1 0 0 1 0 0 ]ct
720 540 mo
0 540 li
0 0 li
720 0 li
720 540 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0156863 .00784314 .00784314 0 cmyk
f
357.176 229.563 mo
357.07 229.573 li
357.174 229.563 li
357.176 229.533 li
357.176 229.563 li
cp
356.954 229.343 mo
356.984 229.352 li
356.99 229.355 li
356.954 229.343 li
cp
545.952 318.786 mo
545.798 318.111 li
545.528 317.499 li
545.112 316.98 li
543.934 316.232 li
543.254 315.61 li
542.913 315.376 li
542.487 315.235 li
541.755 315.292 li
541.102 315.6 li
540.499 315.972 li
539.923 316.232 li
539.259 316.181 li
538.494 315.993 li
537.797 315.993 li
537.338 316.501 li
537.085 316.501 li
536.803 315.744 li
536.036 315.002 li
535.11 314.441 li
534.358 314.219 li
533.892 314.156 li
533.568 313.996 li
531.889 312.23 li
531.773 311.997 li
531.516 311.837 li
530.427 310.328 li
530.051 309.559 li
529.777 309.231 li
528.213 308.235 li
527.55 307.7 li
527.43 307.218 li
526.181 306.803 li
525.765 306.491 li
525.541 306.357 li
525.397 306.347 li
525.318 306.243 li
525.298 305.843 li
524.805 304.969 li
524.944 304.912 li
525.298 304.721 li
524.758 304.343 li
524.046 304.115 li
521.327 303.797 li
520.694 303.382 li
520.206 302.885 li
519.636 302.473 li
518.79 302.573 li
518.24 302.557 li
517.99 302.349 li
517.881 302.008 li
517.606 301.866 li
517.254 301.784 li
516.921 301.602 li
516.25 301.378 li
513.486 301.728 li
513.974 302.227 li
513.718 302.387 li
513.434 302.369 li
513.123 302.219 li
512.801 301.976 li
512.769 302.219 li
512.612 302.552 li
512.545 302.749 li
512.229 301.894 li
511.663 301.866 li
511.066 302.022 li
510.667 301.728 li
510.553 301.8 li
510.526 301.85 li
510.517 301.903 li
510.454 301.976 li
509.494 301.728 li
509.494 301.479 li
510.056 301.321 li
509.937 301.073 li
509.517 300.835 li
507.899 300.497 li
507.376 300.455 li
507.611 300.724 li
506.979 300.549 li
506.069 300.56 li
505.233 300.78 li
504.792 301.249 li
505.478 301.425 li
506.779 302.079 li
507.376 302.473 li
505.437 302.69 li
504.595 302.51 li
504.299 301.728 li
504.107 302.069 li
504.071 302.227 li
503.832 302.227 li
503.666 301.716 li
503.365 301.249 li
504.185 301.094 li
503.945 300.678 li
503.239 300.227 li
502.639 299.979 li
501.968 299.901 li
501.071 299.921 li
500.245 300.159 li
499.815 300.724 li
500.168 300.698 li
500.471 300.745 li
501.034 300.975 li
500.78 301.728 li
500.479 301.565 li
500.211 301.386 li
499.981 301.182 li
499.815 300.975 li
499.603 300.975 li
499.066 301.643 li
497.044 301.171 li
497.236 301.976 li
496.472 301.722 li
496.121 301.472 li
496.178 301.113 li
496.328 300.731 li
496.005 300.616 li
495.118 300.724 li
495.356 300.091 li
495.289 299.457 li
494.958 298.892 li
494.413 298.456 li
494.069 299.185 li
492.421 300.564 li
492.045 301.364 li
491.806 301.746 li
491.266 301.565 li
489.943 300.818 li
489.55 300.03 li
489.228 299.702 li
489.384 299.323 li
489.477 298.892 li
489.509 298.431 li
489.48 298.209 li
489.83 297.32 li
489.876 296.854 li
489.693 296.438 li
491.954 296.703 li
492.617 296.464 li
494.5 296.174 li
494.609 296.231 li
494.865 296.438 li
495.015 296.66 li
495.092 296.921 li
495.206 297.14 li
495.459 297.232 li
495.926 297.465 li
496.478 297.834 li
496.961 297.834 li
497.236 296.958 li
496.758 296.958 li
496.472 296.739 li
496.334 296.349 li
496.291 295.847 li
496.074 295.667 li
494.652 294.936 li
493.899 294.838 li
492.864 294.882 li
491.956 295.154 li
491.574 295.732 li
491.361 295.732 li
491.063 295.104 li
490.619 294.477 li
490.597 294.029 li
491.574 293.96 li
491.512 293.71 li
491.376 293.56 li
491.169 293.48 li
490.889 293.438 li
491.096 293.302 li
491.299 293.229 li
491.527 293.263 li
491.806 293.438 li
492.238 293.176 li
492.451 293.532 li
492.574 294.087 li
492.747 294.436 li
493.313 294.446 li
493.877 294.11 li
494.355 293.629 li
494.652 293.211 li
494.723 292.992 li
494.802 292.446 li
494.865 292.209 li
494.999 292.009 li
495.389 291.692 li
495.591 291.438 li
496.291 289.937 li
495.103 288.132 li
494.319 287.626 li
492.964 287.911 li
492.651 286.646 li
491.972 286.064 li
491.002 285.905 li
489.813 285.908 li
489.211 286.076 li
488.88 286.063 li
488.734 285.783 li
488.631 285.688 li
488.111 285.454 li
487.925 285.407 li
486.149 286.685 li
486.322 287.014 li
486.144 287.171 li
485.855 287.115 li
485.567 286.476 li
485.236 286.29 li
484.807 286.201 li
484.381 286.18 li
484.078 286.285 li
483.549 286.767 li
483.332 286.909 li
482.896 286.981 li
481.977 286.96 li
481.687 286.909 li
481.717 287.564 li
481.51 287.849 li
481.22 287.724 li
480.98 287.16 li
480.903 287.324 li
480.798 287.507 li
480.727 287.683 li
480.514 287.683 li
480.51 287.221 li
480.384 286.881 li
480.135 286.62 li
479.785 286.409 li
479.288 286.282 li
478.909 286.374 li
478.354 286.685 li
478.013 287.045 li
477.773 287.07 li
477.437 286.685 li
477.294 286.238 li
477.316 285.454 li
477.203 285.157 li
477.053 284.296 li
475.957 283.563 li
472.298 282.175 li
471.805 281.855 li
470.901 281.102 li
469.79 280.666 li
469.299 280.263 li
468.457 280 li
464.337 279.874 li
463.708 280.082 li
463.477 280.571 li
463.588 281.162 li
464.006 281.652 li
464.444 281.816 li
465.566 281.967 li
466.102 282.153 li
465.7 282.311 li
464.69 282.903 li
464.508 282.918 li
464.278 282.894 li
464.087 282.898 li
464.006 283.019 li
463.915 283.193 li
463.708 283.398 li
463.477 283.576 li
463.298 283.655 li
462.981 283.537 li
462.633 282.9 li
462.339 282.652 li
461.929 282.675 li
461.55 282.859 li
461.207 282.875 li
460.933 282.402 li
461.066 282.35 li
461.399 282.153 li
460.693 282.153 li
460.693 281.902 li
462.529 281.825 li
462.925 281.346 li
463.045 279.874 li
462.812 279.874 li
462.812 280.646 li
462.592 280.646 li
462.152 280.067 li
461.39 279.613 li
460.573 279.355 li
459.967 279.374 li
459.302 279.635 li
459.287 279.871 li
459.521 280.4 li
459.722 280.72 li
459.944 280.888 li
460.693 281.151 li
460.693 281.376 li
459.967 281.333 li
459.312 281.188 li
458.737 280.926 li
458.219 280.522 li
457.667 280.309 li
456.971 280.19 li
456.517 279.953 li
456.683 279.374 li
456.63 278.987 li
456.967 278.999 li
457.283 279.327 li
457.149 279.874 li
459.08 278.997 li
459.641 278.873 li
459.895 278.636 li
459.688 278.118 li
459.221 277.601 li
458.691 277.367 li
458.315 277.342 li
457.389 277.117 li
456.811 276.727 li
456.654 276.67 li
456.385 276.831 li
456.188 276.841 li
454.076 276.113 li
454.013 276.553 li
453.875 276.923 li
453.392 277.641 li
453.63 277.641 li
453.495 278.078 li
453.406 278.525 li
453.256 278.905 li
452.924 279.145 li
453.022 278.229 li
451.262 279.151 li
450.785 278.247 li
450.915 277.729 li
451.258 277.378 li
451.751 277.179 li
452.97 277.103 li
453.392 276.974 li
453.662 276.597 li
453.862 275.84 li
453.156 275.84 li
453.392 275.339 li
452.943 274.992 li
451.045 274.586 li
449.799 273.986 li
449.219 273.579 li
448.673 273.08 li
444.979 268.552 li
444.35 268.167 li
443.697 268.285 li
443.415 268.648 li
442.545 270.295 li
442.125 272.248 li
441.818 272.805 li
441.491 272.846 li
441.169 273.035 li
441.133 273.08 li
440.282 273.513 li
439.938 273.606 li
440.214 272.953 li
439.668 272.889 li
438.896 273.018 li
438.505 272.942 li
438.355 272.695 li
438.055 272.056 li
437.838 271.396 li
437.929 271.095 li
438.538 270.815 li
438.787 270.202 li
438.608 269.594 li
437.929 269.313 li
436.97 269.393 li
436.629 269.313 li
436.307 269.123 li
436.047 268.872 li
435.757 268.654 li
435.356 268.561 li
434.968 268.368 li
434.852 267.963 li
435.134 267.598 li
435.923 267.534 li
436.223 267.647 li
436.601 267.984 li
436.902 268.126 li
437.105 268.25 li
437.28 268.305 li
437.355 268.171 li
437.406 268.134 li
437.521 268.005 li
437.608 267.87 li
437.589 267.809 li
438.231 267.87 li
438.798 268.038 li
441.003 269.063 li
441.179 269.205 li
441.771 269.866 li
442.078 270.066 li
442.301 269.426 li
443.125 268.535 li
443.251 267.809 li
443.044 267.484 li
442.701 267.164 li
442.512 266.721 li
442.777 266.025 li
442.159 266.189 li
441.652 266.18 li
441.169 266.032 li
440.664 265.774 li
438.638 264.242 li
438.173 264.072 li
437.01 263.117 li
436.525 262.62 li
436.03 262.271 li
434.275 261.729 li
433.575 261.384 li
429.922 258.731 li
429.804 258.537 li
429.581 257.609 li
429.455 257.302 li
428.256 256.296 li
427.723 256.213 li
427.088 256.639 li
426.544 257.3 li
426.248 257.935 li
426.727 257.701 li
426.958 257.762 li
427.327 258.331 li
428.619 259.442 li
429.549 260.599 li
430.031 260.902 li
430.498 260.471 li
430.991 260.998 li
431.588 260.691 li
431.946 260.965 li
432.123 261.467 li
432.164 261.856 li
432.304 261.961 li
432.985 262.237 li
433.223 262.38 li
433.379 262.632 li
433.575 263.489 li
433.995 264.576 li
434.364 265.066 li
435.262 265.47 li
435.59 265.914 li
435.797 266.351 li
435.808 266.55 li
435.71 266.629 li
435.616 266.803 li
435.444 266.972 li
435.111 267.053 li
434.891 266.988 li
434.064 266.55 li
433.021 266.42 li
432.579 266.275 li
432.399 265.901 li
432.279 265.31 li
431.774 264.162 li
431.697 263.489 li
431.816 262.852 li
432.029 262.866 li
432.372 263.074 li
432.872 263.009 li
432.176 262.262 li
431.713 261.886 li
431.227 261.729 li
431.302 261.854 li
431.393 262.119 li
431.458 262.254 li
431.07 262.322 li
430.754 262.278 li
430.551 262.094 li
430.498 261.729 li
429.609 261.968 li
429.346 262.222 li
429.325 262.734 li
427.79 261.75 li
427.214 261.477 li
426.611 261.411 li
424.52 261.729 li
424.224 261.595 li
423.947 261.338 li
423.653 261.186 li
423.154 261.429 li
422.957 261.396 li
421.981 261.083 li
421.531 260.864 li
421.209 260.541 li
421.083 260.094 li
421.034 259.658 li
420.882 259.025 li
420.622 258.453 li
420.249 258.207 li
419.403 258.216 li
419.104 258.077 li
418.711 257.701 li
418.411 257.347 li
418.194 256.958 li
418.054 256.461 li
418.007 255.802 li
418.244 255.491 li
419.344 255.292 li
419.652 254.908 li
419.097 254.897 li
418.172 254.747 li
417.792 254.908 li
417.605 255.275 li
417.441 258.031 li
417.248 258.397 li
416.835 258.456 li
416.596 258.198 li
416.013 257.127 li
415.894 256.822 li
414.313 255.202 li
413.896 254.908 li
413.491 254.765 li
413.216 254.407 li
412.593 253.316 li
412.369 252.644 li
412.185 252.393 li
411.523 251.773 li
411.069 250.801 li
410.74 250.451 li
410.231 250.628 li
409.801 250.476 li
409.354 250.375 li
408.929 250.211 li
408.571 249.871 li
408.68 249.735 li
408.793 249.679 li
407.912 249.689 li
407.63 249.618 li
407.443 249.299 li
407.419 248.881 li
407.353 248.516 li
407.052 248.359 li
405.348 248.232 li
404.809 248.085 li
403.636 247.604 li
403.313 247.583 li
402.95 247.622 li
402.613 247.614 li
402.344 247.466 li
402.08 247.241 li
401.461 246.92 li
401.148 246.685 li
400.899 246.365 li
400.576 245.657 li
400.346 245.286 li
400.209 245.39 li
399.858 245.561 li
399.873 245.315 li
399.84 244.799 li
399.858 244.553 li
399.226 244.649 li
397.154 244.295 li
396.332 244.049 li
395.729 243.73 li
394.942 243.198 li
394.251 242.614 li
393.961 242.144 li
393.479 241.802 li
389.719 240.473 li
388.619 239.365 li
387.597 239.227 li
387.597 239.481 li
387.887 239.652 li
388.12 239.892 li
388.559 240.515 li
388.027 241.685 li
387.708 241.979 li
387.363 241.502 li
387.043 241.663 li
386.915 241.754 li
386.26 239.603 li
386.081 239.227 li
384.471 239.313 li
379.18 238.712 li
378.395 238.723 li
377.735 238.884 li
376.443 239.378 li
375.704 239.481 li
375.307 239.409 li
374.77 239.083 li
374.423 238.999 li
373.998 239.045 li
373.909 239.205 li
373.834 239.444 li
373.461 239.709 li
372.813 239.701 li
371.015 239.31 li
370.643 239.353 li
370.361 239.755 li
369.738 239.538 li
369.091 239.069 li
368.744 238.723 li
367.825 238.872 li
366.814 238.396 li
363.961 235.964 li
363.787 235.542 li
362.87 234.126 li
362.477 234.019 li
361.479 233.995 li
360.971 233.897 li
360.772 233.731 li
359.901 232.748 li
359.583 232.205 li
359.111 231.065 li
358.718 230.471 li
358.327 230.053 li
357.956 229.751 li
357.537 229.533 li
357.014 229.362 li
356.154 225.588 li
355.857 225.403 li
355.076 225.5 li
355.036 225.582 li
354.884 225.764 li
354.68 225.947 li
354.487 226.029 li
354.278 225.961 li
354.153 225.804 li
354.04 225.624 li
352.018 224.185 li
351.411 223.979 li
349.993 223.85 li
349.629 223.75 li
349.303 223.536 li
349.085 223.292 li
348.711 222.713 li
349.164 221.368 li
349.546 221.065 li
350.333 221.447 li
350.97 221.012 li
351.293 220.714 li
351.293 220.433 li
350.991 220.359 li
348.881 220.955 li
347.757 222.012 li
347.046 222.23 li
347.047 222.146 li
347.028 221.965 li
346.928 221.783 li
346.692 221.701 li
346.079 221.731 li
345.891 221.701 li
344.589 220.942 li
344.514 220.695 li
343.735 219.29 li
343.616 218.936 li
343.326 218.614 li
342.951 218.345 li
342.582 218.148 li
342.448 219.039 li
341.762 219.167 li
340.951 218.918 li
339.125 218.005 li
338.546 218.026 li
338.802 218.91 li
336.752 219.715 li
335.683 219.94 li
334.554 219.901 li
333.965 219.767 li
333.39 219.556 li
332.839 219.24 li
332.32 218.782 li
331.891 218.653 li
329.951 218.656 li
329.323 218.492 li
328.868 218.104 li
328.514 217.671 li
328.188 217.365 li
327.663 217.166 li
326.269 216.896 li
325.721 216.857 li
325.015 216.357 li
323.723 214.025 li
322.767 213.304 li
323.667 211.521 li
323.961 211.25 li
323.961 211.021 li
323.625 210.829 li
323.191 210.751 li
322.723 210.803 li
322.275 211.021 li
322.908 211.735 li
322.72 212.432 li
322.073 212.999 li
321.356 213.304 li
320.497 213.338 li
318.893 213.005 li
318.047 213.029 li
312.644 214.065 li
311.942 214.292 li
311.164 214.44 li
310.534 214.236 li
310.273 213.42 li
310.258 212.832 li
310.198 212.697 li
310.062 212.762 li
309.824 212.772 li
308.395 212.519 li
308.176 212.549 li
307.47 212.731 li
307.08 212.772 li
306.905 212.966 li
306.543 213.875 li
306.378 214.182 li
305.854 214.804 li
305.614 215.186 li
305.317 215.352 li
304.635 215.333 li
303.407 214.698 li
301.443 212.404 li
299.915 212.012 li
299.915 211.782 li
300.398 211.353 li
302.27 210.212 li
303.834 209.804 li
304.787 209.407 li
305.275 208.986 li
304.635 208.733 li
304.07 208.902 li
302.547 209.8 li
301.708 210.44 li
300.429 211.072 li
299.915 211.25 li
298.297 211.492 li
297.446 211.735 li
297.074 212.139 li
296.692 212.308 li
293.796 212.81 li
293.482 212.819 li
293.227 212.901 li
292.945 213.166 li
292.821 213.479 li
292.605 214.384 li
292.474 214.576 li
291.958 214.781 li
291.573 214.879 li
291.183 214.826 li
290.758 214.614 li
290.761 214.5 li
290.974 214.361 li
291.183 214.065 li
291.349 213.423 li
291.458 212.57 li
291.34 211.823 li
290.606 211.397 li
290.01 210.906 li
289.772 210.765 li
289.311 210.711 li
288.9 210.728 li
288.518 210.698 li
288.128 210.489 li
287.67 210.728 li
287.124 210.802 li
280.864 210.765 li
280.098 211.021 li
279.076 210.763 li
276.873 210.548 li
275.849 210.259 li
274.558 209.343 li
274.222 209.178 li
273.848 209.239 li
273.472 209.387 li
273.125 209.472 li
272.328 209.552 li
270.945 209.9 li
270.191 209.979 li
267.815 209.407 li
266.723 209.861 li
264.317 210.259 li
262.731 210.941 li
261.363 211.149 li
260.83 211.469 li
259.812 212.265 li
259.27 212.598 li
258.943 212.723 li
258.52 212.772 li
258.347 212.893 li
258.007 213.417 li
257.814 213.535 li
257.057 213.767 li
255.562 214.625 li
254.859 214.576 li
254.032 214.918 li
250.843 215.333 li
247.726 215.188 li
246.966 215.462 li
246.138 215.602 li
244.906 215.405 li
243.79 215.427 li
243.303 216.223 li
242.939 217.14 li
242.189 217.641 li
241.587 217.59 li
241.66 216.857 li
241.339 217.24 li
241.072 217.369 li
240.861 217.246 li
240.721 216.857 li
240.861 216.653 li
241.203 216.596 li
241.426 216.481 li
241.21 216.095 li
240.889 215.919 li
240.635 216.036 li
240.427 216.25 li
240.249 216.351 li
239.888 216.233 li
239.412 215.91 li
239.054 215.844 li
238.852 215.902 li
238.407 216.214 li
238.135 216.351 li
236.706 216.627 li
235.94 216.954 li
235.434 217.376 li
235.396 217.862 li
236.021 218.381 li
235.778 218.63 li
235.48 219.003 li
235.126 219.229 li
234.708 219.039 li
234.444 218.57 li
234.379 218.049 li
234.512 217.604 li
234.826 217.365 li
234.826 217.135 li
234.37 216.732 li
233.814 216.532 li
233.177 216.566 li
232.476 216.857 li
230.697 217.998 li
230.233 218.148 li
229.614 218.453 li
228.969 219.153 li
228.456 219.962 li
228.248 220.57 li
227.967 220.864 li
227.42 221.207 li
227.046 221.321 li
227.29 220.942 li
226.71 220.688 li
226.299 220.377 li
225.906 220.22 li
225.387 220.433 li
225.093 220.869 li
224.816 221.44 li
224.412 221.825 li
223.743 221.701 li
223.837 221.553 li
223.888 221.447 li
223.978 221.192 li
222.55 221.202 li
222.334 221.321 li
221.905 222.495 li
221.758 222.713 li
220.043 222.786 li
219.286 223.008 li
218.553 223.473 li
218.723 223.489 li
218.754 223.531 li
218.742 223.614 li
218.789 223.75 li
219.031 223.589 li
219.281 223.473 li
219.281 223.75 li
219.028 223.87 li
218.555 224.178 li
218.318 224.258 li
217.943 224.249 li
217.507 224.047 li
217.123 223.979 li
216.56 224.037 li
215.368 224.461 li
212.997 225.668 li
212.424 225.778 li
210.929 225.886 li
210.403 226.232 li
210.078 227.019 li
209.606 226.536 li
207.514 228.047 li
207.102 228.249 li
206.637 228.333 li
206.305 228.128 li
206.08 227.675 li
205.782 227.225 li
205.228 227.019 li
204.898 227.091 li
204.587 227.278 li
204.337 227.538 li
204.182 227.824 li
204.753 227.773 li
205.21 227.878 li
205.564 228.137 li
205.827 228.561 li
205.449 228.905 li
205.121 229.308 li
204.761 229.5 li
204.3 229.207 li
203.86 229.022 li
203.611 229.465 li
203.504 230.099 li
203.479 230.471 li
203.296 230.646 li
202.405 230.725 li
202.07 230.861 li
201.88 231.222 li
201.578 232.61 li
201.288 232.141 li
200.889 231.934 li
200.422 232.005 li
199.932 232.379 li
199.588 232.212 li
199.228 232.104 li
199.228 232.379 li
199.63 232.854 li
199.471 233.658 li
199.04 234.487 li
198.629 235.047 li
197.985 235.417 li
196.513 235.689 li
195.919 236.172 li
196.622 236.172 li
196.622 236.448 li
196.007 236.819 li
195.499 237.396 li
194.765 238.469 li
194.676 238.647 li
194.54 239.118 li
194.401 239.353 li
194.235 239.463 li
193.864 239.499 li
193.685 239.596 li
193.183 240.54 li
193.099 240.629 li
192.609 242.258 li
192.457 243.054 li
192.394 243.909 li
192.264 244.527 li
191.947 245.2 li
191.561 245.771 li
191.221 246.091 li
191.784 246.212 li
192.101 246.695 li
192.326 247.311 li
192.609 247.832 li
193.038 248.178 li
193.666 248.52 li
194.361 248.767 li
195 248.842 li
194.83 249.085 li
194.508 249.871 li
195.191 250.218 li
195.309 250.641 li
195.266 251.183 li
195.47 251.887 li
195.95 252.308 li
196.337 251.964 li
196.701 251.324 li
197.112 250.857 li
196.622 252.896 li
196.1 252.814 li
195.165 253.491 li
195 253.275 li
194.798 252.858 li
194.311 252.404 li
193.725 252.038 li
193.228 251.887 li
192.217 252.148 li
191.435 252.622 li
190.635 252.847 li
189.555 252.369 li
189.705 252.079 li
189.49 251.91 li
189.073 251.854 li
188.615 251.887 li
188.355 252.025 li
186.483 253.384 li
183.554 254.696 li
181.055 255.437 li
178.237 256.948 li
178.24 256.21 li
177.915 255.851 li
177.389 255.849 li
176.804 256.17 li
177.371 256.571 li
177.35 257.04 li
176.946 257.457 li
176.358 257.701 li
176.048 257.733 li
175.747 257.698 li
175.465 257.583 li
175.217 257.385 li
175.111 257.213 li
175.018 256.993 li
174.907 256.803 li
174.743 256.711 li
174.514 256.805 li
174.295 257.051 li
174.116 257.347 li
174.005 257.587 li
173.881 258.206 li
173.959 258.81 li
174.242 259.336 li
174.713 259.715 li
176.159 260.166 li
177.656 260.191 li
179.037 259.852 li
182.513 257.539 li
183.848 256.904 li
186.578 256.1 li
188.109 255.866 li
189.482 256.104 li
190.258 257.18 li
189.994 258.631 li
188.615 261.528 li
189.063 262.254 li
190.513 262.123 li
191.99 261.317 li
196.054 257.919 li
197.13 257.598 li
197.908 257.105 li
198.287 256.948 li
198.636 256.923 li
199.351 256.976 li
199.698 256.948 li
200.335 256.673 li
201.662 255.859 li
202.409 255.688 li
203.174 255.847 li
204.473 256.539 li
205.122 256.696 li
205.543 256.614 li
205.943 256.407 li
206.314 256.121 li
206.637 255.802 li
206.792 255.455 li
206.651 255.186 li
206.419 254.973 li
206.293 254.797 li
206.579 254.047 li
207.767 253.17 li
207.962 252.369 li
207.528 252.708 li
207.13 252.805 li
206.792 252.626 li
206.532 252.139 li
206.49 251.535 li
206.725 251.141 li
207.102 251.056 li
207.492 251.385 li
207.47 250.836 li
207.417 250.616 li
207.235 250.376 li
207.401 250.011 li
207.664 248.997 li
207.707 248.715 li
209.116 247.328 li
209.881 247.175 li
212.553 247.328 li
213.054 247.21 li
213.465 246.688 li
213.857 246.57 li
213.821 246.679 li
213.862 246.927 li
213.955 247.183 li
214.091 247.328 li
214.277 247.356 li
218.085 246.799 li
218.017 246.942 li
217.943 247.196 li
217.87 247.328 li
218.813 247.078 li
219.82 246.435 li
220.673 245.542 li
221.159 244.553 li
221.395 244.553 li
221.592 244.986 li
221.846 245.402 li
221.937 245.776 li
221.649 246.091 li
223.169 246.708 li
224.947 246.938 li
226.487 246.542 li
227.29 245.286 li
227.66 245.849 li
228.037 246.016 li
228.281 245.762 li
228.299 245.333 li
228.353 245.448 li
228.463 245.561 li
228.774 245.322 li
228.942 245.085 li
229.168 244.553 li
229.208 244.391 li
229.19 244.263 li
229.22 244.082 li
229.401 243.773 li
229.824 243.312 li
231.067 242.51 li
231.085 242.409 li
231.067 241.888 li
231.124 241.741 li
231.257 241.754 li
231.41 241.802 li
231.659 241.713 li
231.817 241.757 li
231.951 241.771 li
232.006 241.627 li
231.993 241.11 li
232.006 241.019 li
232.496 240.88 li
232.966 240.922 li
234.1 241.248 li
235.216 241.117 li
236.031 240.314 li
237.995 236.559 li
238.938 235.572 li
240.064 234.818 li
242.356 233.622 li
242.885 233.454 li
243.667 233.39 li
244.079 233.125 li
246.144 231.367 li
247.308 230.979 li
247.814 230.634 li
248.023 229.962 li
248.035 229.237 li
248.15 228.513 li
248.504 227.916 li
249.22 227.548 li
249.957 227.534 li
251.407 227.946 li
256.406 228.561 li
256.747 228.482 li
257.414 228.136 li
257.814 228.055 li
261.48 228.134 li
262.983 228.482 li
263.699 228.561 li
264.449 228.476 li
265.857 228.113 li
266.646 228.055 li
270.852 228.961 li
272.326 229.069 li
275.619 228.818 li
278.375 228.564 li
281.3 228.771 li
282.769 229.203 li
283.879 229.85 li
285.281 230.904 li
285.682 231.49 li
287.281 232.273 li
287.468 232.265 li
287.563 232.371 li
287.658 232.887 li
287.629 233.574 li
287.445 234.502 li
287.152 235.315 li
286.805 235.668 li
286.46 235.806 li
286.195 236.121 li
285.97 236.462 li
285.757 236.676 li
285.382 236.766 li
284.703 236.766 li
284.348 236.956 li
283.961 236.884 li
281.243 237.557 li
280.557 237.594 li
279.941 237.492 li
279.394 237.206 li
278.514 237.546 li
271.995 237.778 li
271.128 237.438 li
270.845 237.843 li
270.327 238.059 li
269.851 238.354 li
269.722 238.999 li
270.043 239.627 li
270.627 239.91 li
271.26 239.988 li
271.727 239.983 li
271.763 240.128 li
272.158 240.812 li
272.326 241.019 li
272.614 241.125 li
273.299 241.202 li
273.606 241.373 li
274.128 241.806 li
274.624 242.088 li
279.502 244.045 li
280.098 244.667 li
280.22 245.209 li
280.536 245.723 li
281.402 246.685 li
281.89 246.873 li
283.498 247.073 li
283.879 247.075 li
283.782 246.817 li
283.725 246.717 li
283.622 246.57 li
284.269 246.663 li
284.491 246.545 li
284.583 246.091 li
284.794 246.091 li
285.27 246.306 li
286.076 246.391 li
286.833 246.355 li
287.166 246.205 li
287.354 245.797 li
287.764 245.805 li
288.168 245.98 li
288.342 246.091 li
289.772 246.57 li
289.924 246.688 li
290.006 247.01 li
290.114 247.075 li
290.325 247.032 li
290.428 246.937 li
290.493 246.842 li
290.583 246.799 li
290.986 246.688 li
291.49 246.198 li
291.759 246.091 li
292.124 246.198 li
292.786 246.688 li
293.177 246.799 li
294.834 246.799 li
296.139 247.359 li
296.896 249.818 li
298.144 250.376 li
298.565 250.276 li
298.664 250.047 li
298.705 249.793 li
298.956 249.618 li
299.236 249.697 li
299.469 249.922 li
299.744 250.061 li
300.15 249.871 li
300.297 249.589 li
300.257 248.898 li
300.365 248.588 li
300.58 248.434 li
301.539 248.085 li
301.862 248.347 li
302.354 249.414 li
302.5 250.578 li
302.01 251.385 li
302.725 251.435 li
302.994 250.294 li
302.971 245.812 li
302.488 244.234 li
302.479 243.773 li
302.708 243.391 li
303.094 243.262 li
303.555 243.362 li
304.016 243.658 li
304.925 245.066 li
305.084 245.172 li
304.825 246.742 li
304.85 247.328 li
304.968 247.687 li
305.854 249.557 li
306.198 250.121 li
306.723 250.494 li
308.077 250.766 li
309.364 251.427 li
310.039 251.659 li
313.027 251.957 li
317.986 251.406 li
322.223 251.703 li
326.498 251.58 li
327.975 252.139 li
328.186 251.27 li
327.971 250.37 li
327.52 249.531 li
327.014 248.842 li
325.98 248.09 li
325.653 247.59 li
325.839 246.799 li
326.332 247.016 li
326.846 247.08 li
327.27 246.946 li
327.504 246.57 li
327.771 247.009 li
328.094 247.325 li
328.915 247.832 li
328.423 248.391 li
328.464 248.845 li
328.897 249.113 li
329.577 249.116 li
329.538 249.598 li
329.849 249.615 li
330.264 249.505 li
330.537 249.618 li
330.541 249.918 li
330.4 250.222 li
330.21 250.536 li
330.067 250.857 li
330.267 250.762 li
330.793 250.628 li
330.335 251.017 li
329.744 251.2 li
329.144 251.228 li
328.659 251.131 li
328.652 251.569 li
328.752 251.805 li
329.13 252.139 li
329.266 252.179 li
329.683 252.114 li
329.835 252.139 li
329.974 252.34 li
330.002 252.54 li
330.002 252.737 li
330.067 252.896 li
333.826 256.918 li
334.884 257.827 li
336.681 258.399 li
337.694 259.247 li
339.151 259.563 li
340.562 260.098 li
341.27 260.22 li
341.856 260.405 li
342.268 260.895 li
342.503 261.589 li
342.582 262.38 li
342.836 262.981 li
343.423 263.641 li
344.061 263.951 li
344.481 263.489 li
344.201 263.428 li
343.859 263.244 li
343.645 262.999 li
343.735 262.734 li
344.045 262.66 li
344.448 262.753 li
345.146 263.009 li
345.913 263.128 li
346.58 263.124 li
347.188 262.938 li
347.771 262.507 li
347.865 262.958 li
347.83 263.478 li
347.944 263.893 li
348.477 264.014 li
348.477 264.242 li
347.771 264.519 li
347.771 264.769 li
348.542 265.052 li
349.303 265.451 li
349.888 265.538 li
350.12 264.895 li
350.508 264.305 li
351.392 264.286 li
353.71 264.959 li
356.145 265.02 li
356.582 265.167 li
356.821 265.517 li
356.984 265.934 li
357.188 266.275 li
357.464 266.51 li
357.666 266.594 li
359.14 267.001 li
359.339 267.107 li
359.667 267.407 li
360.012 267.59 li
360.349 267.534 li
360.609 267.293 li
360.712 266.917 li
360.848 266.611 li
361.151 266.934 li
361.672 267.809 li
362.004 268.126 li
362.327 268.324 li
363.083 268.561 li
363.759 268.568 li
365.545 268.35 li
366.03 268.425 li
366.669 269.015 li
367.236 269.364 li
369.996 270.163 li
371.39 270.292 li
372.757 270.171 li
374.167 269.794 li
375.979 268.908 li
376.654 268.79 li
378.137 268.761 li
378.762 268.614 li
379.356 268.285 li
379.588 268.561 li
379.953 268.414 li
380.326 268.443 li
380.74 268.528 li
381.795 268.593 li
382.061 268.564 li
382.174 268.425 li
382.239 268.242 li
382.396 268.038 li
382.59 267.874 li
382.761 267.809 li
384.359 267.651 li
385.953 267.282 li
386.384 267.087 li
386.608 266.937 li
386.86 266.904 li
387.363 267.053 li
388.075 267.455 li
388.427 267.713 li
388.666 267.931 li
389.101 268.519 li
389.271 268.894 li
389.137 269.063 li
388.189 269.086 li
387.753 269.011 li
387.363 268.79 li
387.141 269.294 li
387.303 269.569 li
387.729 269.709 li
389.553 269.991 li
390.092 270.191 li
390.652 270.571 li
391.366 271.301 li
392.068 272.306 li
392.602 273.479 li
392.809 274.71 li
392.955 275.238 li
393.602 276.358 li
393.75 276.98 li
393.821 277.677 li
394.142 278.87 li
394.221 279.51 li
394.47 279.774 li
395.592 280.149 li
395.84 280.522 li
395.706 281.055 li
395.383 281.301 li
395 281.247 li
394.688 280.877 li
394.464 281.931 li
394.829 282.972 li
395.358 284.005 li
395.627 285.032 li
395.746 287.418 li
395.959 288.669 li
396.198 289.013 li
396.503 289.046 li
397.767 290.015 li
398.19 290.437 li
398.704 291.409 li
399.083 291.964 li
399.516 292.209 li
400.725 292.145 li
401.191 292.277 li
403.624 294.046 li
403.875 294.575 li
403.969 294.884 li
404.186 295.233 li
404.596 295.732 li
404.658 295.992 li
404.683 296.339 li
404.803 296.526 li
405.178 296.323 li
405.722 296.299 li
406.417 296.733 li
407.052 297.314 li
407.413 297.729 li
408.02 298.908 li
408.436 299.307 li
409.188 299.457 li
409.599 299.64 li
410.725 300.975 li
410.938 300.455 li
411.197 300.455 li
411.566 301.239 li
412.738 301.545 li
414.977 301.479 li
415.5 301.229 li
415.936 300.802 li
416.449 300.408 li
417.198 300.227 li
418.458 300.373 li
419.101 300.56 li
420.014 301.187 li
420.6 301.378 li
422.298 301.479 li
422.74 301.446 li
422.864 301.364 li
423.091 301.498 li
423.763 301.696 li
424.026 301.728 li
425.045 301.676 li
425.313 301.728 li
425.542 301.847 li
426.035 302.227 li
426.348 302.188 li
427.68 301.479 li
429.429 302.126 li
430.031 302.227 li
430.411 302.227 li
430.638 302.161 li
430.863 302.069 li
431.227 301.976 li
431.468 301.882 li
431.641 301.773 li
431.837 301.768 li
432.164 301.976 li
432.612 301.462 li
433.515 301.066 li
434.594 300.818 li
435.584 300.724 li
436.556 301.073 li
437.229 301.877 li
437.815 302.791 li
438.505 303.471 li
438.751 302.791 li
439.42 302.93 li
440.664 303.725 li
440.664 303.975 li
439.938 304.969 li
439.7 305.1 li
439.39 305.203 li
439.114 305.349 li
439 305.594 li
439.128 306.407 li
439.493 306.775 li
440.022 307.026 li
440.664 307.462 li
440.877 307.218 li
440.656 306.808 li
440.986 306.854 li
442.218 307.326 li
443.147 307.949 li
443.483 308.26 li
444.553 309.979 li
444.091 311.261 li
443.827 311.498 li
443.592 311.763 li
443.483 313.513 li
442.072 314.401 li
441.818 314.612 li
441.735 315.205 li
441.496 315.75 li
441.133 316.201 li
440.664 316.501 li
440.156 316.637 li
439.715 316.616 li
439.508 316.408 li
439.706 315.979 li
439.478 315.963 li
439.357 315.968 li
439.254 315.979 li
438.761 316.397 li
438.222 317.718 li
437.706 317.996 li
437.043 318.1 li
433.575 319.726 li
432.929 320.197 li
432.36 321.022 li
430.888 321.813 li
430.287 322.228 li
429.679 323.141 li
429.581 323.358 li
429.435 323.497 li
428.77 323.712 li
428.429 324.034 li
427.52 323.736 li
427.214 323.715 li
427.15 323.939 li
427.613 324.402 li
427.68 324.714 li
426.041 326.201 li
425.921 326.478 li
425.864 326.654 li
425.096 327.718 li
424.446 328.305 li
424.286 328.583 li
424.39 328.983 li
424.15 329.124 li
423.919 329.503 li
423.689 329.727 li
423.434 329.851 li
423.004 329.896 li
422.75 329.975 li
422.71 330.313 li
422.064 331.521 li
422.024 332.186 li
422.251 332.586 li
422.631 332.911 li
423.091 333.127 li
423.56 333.204 li
424.224 333.162 li
426.348 332.59 li
427.798 332.704 li
429.039 332.581 li
431.221 332.046 li
434.407 331.964 li
435.051 331.871 li
436.014 331.491 li
436.629 331.465 li
436.629 331.217 li
435.688 331.217 li
436.233 330.567 li
437.126 330.333 li
438.122 330.411 li
439 330.697 li
439.228 330.329 li
439.564 330.179 li
439.919 330.229 li
440.173 330.474 li
440.406 330.474 li
440.883 330.122 li
441.766 330.286 li
443.483 330.973 li
444.356 331.106 li
448.803 330.905 li
449.612 330.697 li
450.341 330.34 li
451.45 329.436 li
451.986 329.206 li
452.7 329.26 li
453.453 329.424 li
454.208 329.462 li
454.918 329.094 li
459.375 328.719 li
463.751 328.983 li
464.514 328.817 li
465.956 328.319 li
466.698 328.215 li
469.193 328.215 li
470.508 328.024 li
473.253 327.282 li
474.831 327.219 li
477.939 327.579 li
482.476 328.674 li
482.979 328.6 li
483.439 328.315 li
484.125 328.116 li
485.443 327.967 li
486.149 328.051 li
487.495 328.402 li
488.147 328.487 li
490.608 328.402 li
491.361 328.487 li
492.559 329.109 li
493.98 330.122 li
495.389 330.869 li
496.53 330.697 li
497.247 331.116 li
498.273 331.32 li
499.379 331.341 li
500.308 331.217 li
500.521 331.106 li
500.805 330.77 li
500.904 330.697 li
501.144 330.736 li
501.484 330.916 li
502.633 331.181 li
503.008 331.217 li
506.404 331.009 li
508.155 330.584 li
508.291 329.206 li
509.681 328.563 li
510.579 328.501 li
510.586 328.252 li
510.754 327.868 li
511.155 327.718 li
510.995 327.137 li
510.92 326.971 li
510.85 327.127 li
510.76 327.257 li
510.632 327.371 li
510.454 327.488 li
510.21 327.179 li
510.097 326.799 li
510.159 326.44 li
510.454 326.201 li
510.902 326.176 li
511.243 326.37 li
511.859 326.971 li
511.916 326.248 li
512.115 325.625 li
512.468 325.112 li
513.018 324.714 li
513.07 325.646 li
513.257 326.352 li
513.204 326.928 li
512.545 327.488 li
512.162 327.582 li
511.731 327.625 li
511.419 327.786 li
511.393 328.215 li
511.663 328.43 li
512.837 328.351 li
512.898 330.79 li
513.744 330.417 li
514.211 329.975 li
514.424 329.975 li
515.022 330.49 li
515.853 330.157 li
517.158 329.206 li
517.378 329.006 li
517.418 328.039 li
517.521 327.718 li
517.791 327.686 li
519.293 327.718 li
520.056 327.521 li
520.646 327.05 li
521.182 326.478 li
521.773 325.979 li
522.636 325.585 li
523.517 325.377 li
527.746 325.086 li
531.4 324.982 li
533.455 324.552 li
534.92 324.438 li
537.085 323.987 li
538.677 324.043 li
540.124 324.416 li
541.401 324.453 li
542.487 323.494 li
542.678 322.196 li
542.86 321.999 li
543.088 321.92 li
543.789 321.517 li
544.267 321.02 li
544.999 320.727 li
545.721 320.286 li
546.031 319.487 li
545.952 318.786 li
cp
376.362 229.238 mo
378.423 229.371 li
378.926 229.57 li
379.119 230.081 li
379.912 229.655 li
379.922 229.248 li
379.383 228.936 li
376.159 228.732 li
375.575 228.813 li
376.009 229.094 li
376.362 229.238 li
cp
375.339 293.438 mo
375.873 293.42 li
376.043 293.438 li
375.171 292.364 li
373.838 291.055 li
372.313 290.131 li
370.858 290.208 li
371.055 290.589 li
371.326 290.871 li
371.661 291.066 li
372.053 291.184 li
371.962 291.001 li
371.941 290.911 li
371.909 290.839 li
371.795 290.71 li
371.795 290.437 li
372.554 290.534 li
373.422 291.272 li
374.185 292.225 li
374.634 292.958 li
374.188 292.56 li
373.798 292.084 li
373.354 291.667 li
372.759 291.438 li
372.759 291.71 li
373.95 293.094 li
374.603 293.691 li
375.575 294.188 li
375.435 293.645 li
375.339 293.438 li
cp
378.11 294.736 mo
377.711 294.575 li
377.468 294.315 li
376.899 294.16 li
376.271 294.115 li
375.832 294.188 li
376.195 294.601 li
377.926 295.732 li
378.745 295.945 li
378.863 296.084 li
378.961 296.318 li
379.174 296.117 li
379.474 295.597 li
379.567 295.055 li
378.92 294.829 li
378.11 294.736 li
cp
366.282 285.747 mo
365.198 285.908 li
365.495 286.252 li
366.394 286.909 li
366.645 286.714 li
366.933 286.766 li
367.182 287.015 li
367.332 287.41 li
366.624 287.432 li
366.394 287.41 li
366.852 287.754 li
367.403 287.922 li
367.978 287.904 li
368.507 287.683 li
367.157 286.276 li
366.282 285.747 li
cp
382.819 297.408 mo
381.129 297.462 li
381.119 296.989 li
381.052 296.61 li
380.894 296.323 li
380.563 296.299 li
380.221 296.6 li
379.803 297.232 li
380.584 298.016 li
382.998 298.302 li
383.586 298.728 li
383.842 298.728 li
383.442 297.762 li
382.819 297.408 li
cp
357.234 224.687 mo
358.256 224.258 li
358.907 224.496 li
359.203 225.017 li
359.381 225.539 li
359.667 225.778 li
359.833 225.862 li
360.38 226.277 li
360.499 226.42 li
360.547 226.844 li
360.683 227.001 li
360.906 227.087 li
361.691 227.695 li
362.278 227.979 li
362.909 228.057 li
363.532 227.824 li
364.684 229.115 li
365.198 229.573 li
365.657 229.873 li
365.972 230.018 li
366.275 230.081 li
366.555 230.167 li
367.332 230.861 li
367.029 230.192 li
366.468 229.352 li
365.777 228.633 li
364.373 228.089 li
363.084 227.032 li
361.5 226.54 li
360.755 225.932 li
358.966 223.909 li
358.399 223.643 li
357.694 223.679 li
356.72 223.979 li
356.777 224.663 li
357.234 224.687 li
cp
385.215 299.314 mo
384.544 299.457 li
384.949 300.035 li
385.718 300.678 li
386.556 300.959 li
387.15 300.455 li
385.943 299.615 li
385.215 299.314 li
cp
324.766 209.763 mo
324.902 209.979 li
325.488 209.858 li
326.179 210.06 li
326.789 210.318 li
327.13 210.372 li
327.422 210.165 li
327.693 210.034 li
327.896 209.881 li
327.975 209.609 li
327.885 209.343 li
327.675 209.33 li
327.434 209.425 li
327.25 209.472 li
326.374 209.5 li
326.075 209.472 li
325.891 209.364 li
325.617 209.033 li
325.478 208.961 li
324.916 209.005 li
324.548 209.162 li
324.321 209.472 li
324.197 209.979 li
324.616 209.75 li
324.766 209.763 li
cp
336.198 218.148 mo
336.172 217.787 li
336.049 217.498 li
335.829 217.28 li
335.512 217.135 li
335.683 217.027 li
336.015 216.732 li
336.198 216.627 li
335.579 216.228 li
334.815 216.31 li
333.143 217.135 li
332.852 216.92 li
332.62 216.88 li
332.416 216.969 li
332.205 217.135 li
332.732 217.55 li
336.198 218.148 li
cp
345.905 219.293 mo
346.243 219.125 li
346.602 218.621 li
346.928 218.521 li
347.661 218.982 li
348.028 218.63 li
348.055 218.129 li
347.771 218.148 li
347.232 217.88 li
346.677 217.883 li
346.132 218.077 li
345.637 218.381 li
345.905 219.293 li
cp
313.281 211.363 mo
314.396 211.25 li
314.815 211.363 li
315.184 211.553 li
315.595 211.59 li
316.167 211.25 li
316.48 210.945 li
316.482 210.773 li
316.268 210.524 li
315.931 209.979 li
315.675 209.979 li
315.675 210.489 li
315.144 210.004 li
314.992 209.75 li
314.757 209.979 li
314.897 210.175 li
315.09 210.562 li
315.226 210.765 li
314.497 210.604 li
313.829 210.58 li
313.212 210.712 li
311.127 212.093 li
310.743 212.519 li
312.444 211.656 li
313.281 211.363 li
cp
338.584 214.128 mo
339.271 213.814 li
339.557 213.554 li
339.653 213.4 li
339.472 213.325 li
338.919 213.304 li
338.44 213.195 li
337.982 212.905 li
337.611 212.493 li
337.392 212.012 li
337.136 212.012 li
336.916 212.377 li
336.691 212.651 li
336.51 212.924 li
336.433 213.304 li
337.886 213.996 li
338.584 214.128 li
cp
416.64 305.94 mo
416.248 306.035 li
416.372 306.056 li
416.685 306.222 li
416.723 306.631 li
416.818 306.611 li
417.149 306.33 li
417.139 306.086 li
416.64 305.94 li
cp
409.339 302.114 mo
409.266 302.227 li
409.426 302.458 li
409.576 302.499 li
409.827 302.054 li
409.738 301.985 li
409.339 302.114 li
cp
390.916 300.232 mo
391.02 300.098 li
390.977 300.044 li
390.867 299.973 li
390.89 299.79 li
391.116 299.314 li
391.08 299.007 li
390.942 298.971 li
390.807 299.133 li
390.762 299.146 li
390.884 298.843 li
390.841 298.712 li
390.662 298.821 li
390.53 298.966 li
390.398 299.032 li
390.261 299.049 li
390.161 299.185 li
390.204 299.339 li
390.705 300.204 li
390.916 300.232 li
cp
391.396 296.227 mo
391.272 296.227 li
391.127 296.271 li
391.066 296.349 li
391.253 296.796 li
391.427 296.982 li
391.589 296.936 li
391.632 296.729 li
391.585 296.526 li
391.396 296.227 li
cp
260.73 269.473 mo
260.629 269.383 li
260.461 269.301 li
259.771 269.222 li
259.492 269.266 li
259.46 269.447 li
259.593 269.623 li
259.921 269.709 li
260.608 270.074 li
260.866 269.916 li
261.011 269.704 li
260.957 269.582 li
260.73 269.473 li
cp
265.579 268.917 mo
265.49 268.818 li
265.508 268.765 li
265.625 268.736 li
265.663 268.645 li
265.459 268.662 li
265.089 268.79 li
264.986 268.938 li
265.002 269.083 li
264.695 268.945 li
264.381 269.072 li
264.203 269.048 li
264.006 269.188 li
263.763 269.544 li
263.791 269.606 li
264.178 269.47 li
264.916 269.405 li
265.504 269.217 li
265.794 269.034 li
265.663 269.018 li
265.579 268.917 li
cp
257.095 263.401 mo
256.905 263.478 li
256.688 263.426 li
256.58 263.142 li
256.452 263.075 li
256.273 263.231 li
256.202 263.381 li
256.162 263.4 li
256.13 263.213 li
256.19 263.043 li
256.264 262.941 li
256.19 262.884 li
256.044 262.816 li
255.752 262.526 li
255.536 262.437 li
255.511 262.498 li
255.699 262.69 li
255.886 263.007 li
255.869 263.31 li
255.804 263.512 li
255.855 263.58 li
255.969 263.614 li
256.044 263.727 li
256.042 263.925 li
255.712 264.122 li
256.263 264.206 li
256.577 264.101 li
256.767 263.939 li
256.917 264.014 li
257.021 264.197 li
257.117 264.276 li
257.405 264.297 li
257.303 263.965 li
257.095 263.401 li
cp
234.608 262.011 mo
234.613 261.746 li
234.379 261.167 li
234.2 260.74 li
234.184 260.638 li
234.018 260.281 li
233.856 260.098 li
233.792 260.246 li
233.86 260.706 li
234.397 261.776 li
234.608 262.011 li
cp
254.625 258.259 mo
254.817 258.331 li
255.032 258.12 li
255.085 257.841 li
254.771 257.542 li
254.42 257.428 li
254.25 257.44 li
254.187 257.53 li
254.338 257.63 li
254.517 257.804 li
254.714 257.853 li
254.882 257.832 li
254.746 257.998 li
254.625 258.259 li
cp
253.357 257.22 mo
253.496 257.368 li
253.784 257.537 li
253.828 257.497 li
253.599 257.277 li
253.357 257.22 li
cp
228.323 255.401 mo
227.793 255.296 li
227.542 255.299 li
225.93 255.788 li
226.035 255.896 li
228.85 255.645 li
228.935 255.552 li
228.688 255.434 li
228.323 255.401 li
cp
298.855 252.354 mo
298.677 252.433 li
298.519 252.536 li
298.375 252.528 li
298.194 252.451 li
297.991 252.287 li
297.85 252.043 li
297.846 251.821 li
297.893 251.668 li
297.639 251.209 li
297.521 251.324 li
297.553 251.567 li
297.462 251.649 li
297.33 251.605 li
297.264 251.488 li
297.128 251.49 li
297.164 251.753 li
297.299 252.144 li
297.18 252.425 li
296.814 252.552 li
296.484 252.568 li
296.273 252.454 li
296.126 252.046 li
296.037 252.151 li
295.828 252.118 li
295.167 251.603 li
295 251.377 li
294.921 251.117 li
294.769 251.012 li
294.621 251.034 li
294.495 251.095 li
294.216 250.86 li
294.084 251.025 li
294.208 251.211 li
294.606 251.366 li
296.38 252.805 li
296.777 252.817 li
297.16 252.65 li
297.454 252.604 li
297.625 252.725 li
297.732 252.844 li
297.85 252.93 li
299.16 252.491 li
299.102 252.386 li
298.855 252.354 li
cp
401.361 245.54 mo
401.581 245.485 li
401.979 245.005 li
402.118 244.603 li
402.508 244.049 li
402.494 243.841 li
401.814 243.936 li
401.222 244.526 li
401.163 244.791 li
401.231 245.036 li
401.559 245.095 li
401.646 245.251 li
401.54 245.415 li
401.361 245.54 li
cp
415.224 244.415 mo
415.468 244.277 li
416.02 243.726 li
416.122 243.571 li
415.967 243.552 li
415.713 243.712 li
415.463 243.719 li
415.203 243.566 li
415.054 243.566 li
414.928 243.716 li
414.892 243.859 li
415.224 244.225 li
415.224 244.415 li
cp
415.421 241.248 mo
415.53 241.419 li
416.005 241.792 li
416.069 241.942 li
416.097 242.231 li
416.25 242.396 li
416.485 242.369 li
416.553 242.085 li
416.329 241.67 li
416.052 241.347 li
415.847 241.212 li
415.34 240.648 li
415.131 240.597 li
415.027 240.749 li
415.114 240.908 li
415.421 241.248 li
cp
191.306 238.898 mo
191.679 238.994 li
192.104 239.216 li
192.508 239.327 li
193.086 239.045 li
193.197 239.048 li
193.373 239.093 li
193.519 238.884 li
193.445 238.617 li
193.274 238.576 li
193.103 238.668 li
192.941 238.712 li
191.707 238.319 li
191.718 238.186 li
191.661 238.122 li
191.5 238.247 li
191.373 238.418 li
191.303 238.57 li
191.337 238.723 li
191.165 238.789 li
191.306 238.898 li
cp
406.916 237.04 mo
407.097 237.084 li
407.227 237.199 li
407.32 237.133 li
407.456 236.702 li
407.56 236.557 li
407.639 236.341 li
407.772 236.333 li
408.016 236.788 li
408.14 237.302 li
408.367 237.44 li
408.411 237.149 li
408.156 236.655 li
407.772 236.198 li
407.354 235.92 li
407.243 235.99 li
407.251 236.133 li
407.097 236.437 li
406.816 236.741 li
406.553 236.863 li
406.417 237.014 li
406.61 237.103 li
406.916 237.04 li
cp
383.411 235.554 mo
383.641 235.636 li
383.714 235.591 li
383.813 235.661 li
384.021 235.929 li
384.324 236.018 li
384.475 235.894 li
384.207 235.376 li
383.987 234.981 li
383.842 234.924 li
383.712 234.949 li
383.298 234.912 li
383.136 234.999 li
383.014 235.11 li
382.91 235.343 li
383.036 235.516 li
383.411 235.554 li
cp
389.037 231.256 mo
389.082 231.405 li
389.003 231.607 li
389.039 231.67 li
389.203 231.651 li
389.295 231.733 li
389.355 231.729 li
389.415 231.569 li
389.51 231.483 li
389.6 231.556 li
389.393 231.98 li
389.522 232.152 li
389.696 232.001 li
389.638 231.865 li
389.566 231.78 li
389.786 231.799 li
390.094 232.13 li
390.306 232.141 li
390.378 232.245 li
390.348 232.381 li
390.589 232.56 li
390.837 232.481 li
390.782 232.22 li
390.167 231.437 li
389.465 231.004 li
388.936 230.979 li
388.76 231.061 li
388.83 231.157 li
389.037 231.256 li
cp
373.269 230.846 mo
373.461 230.911 li
373.508 231.171 li
373.615 231.236 li
373.749 231.058 li
373.804 230.918 li
374.028 230.929 li
374.031 230.793 li
373.966 230.665 li
373.934 230.574 li
373.864 230.498 li
373.901 230.356 li
373.909 230.183 li
373.682 230.081 li
373.343 230.124 li
372.761 230.485 li
372.747 230.721 li
372.978 230.886 li
373.269 230.846 li
cp
361.423 229.115 mo
361.393 228.951 li
361.304 228.886 li
361.192 228.979 li
361.113 228.858 li
361.106 228.561 li
361.157 228.298 li
361.092 228.146 li
360.921 228.178 li
360.846 228.246 li
360.864 228.417 li
360.831 228.513 li
360.712 228.527 li
360.549 228.799 li
360.454 228.89 li
360.427 229.017 li
360.454 229.104 li
360.56 229.284 li
360.606 229.561 li
360.831 229.834 li
361.177 229.87 li
361.214 229.72 li
361.142 229.525 li
361.278 229.269 li
361.423 229.115 li
cp
213.054 224.518 mo
213.015 224.361 li
213.122 224.079 li
213.405 223.861 li
213.834 223.85 li
214.052 223.681 li
214.2 223.65 li
214.355 223.66 li
214.456 223.742 li
214.411 223.861 li
214.417 223.99 li
214.556 223.959 li
214.713 223.805 li
214.685 223.641 li
214.252 223.475 li
213.844 223.428 li
213.254 223.798 li
212.861 224.397 li
212.78 224.787 li
212.925 224.684 li
213.054 224.518 li
cp
349.589 220.141 mo
349.4 220.581 li
349.378 220.681 li
349.811 220.631 li
349.939 220.534 li
349.939 220.239 li
349.813 220.058 li
349.589 220.141 li
cp
345.301 217.834 mo
345.356 218.313 li
345.533 218.297 li
345.697 218.209 li
345.784 218.122 li
346.066 218.002 li
346.124 217.801 li
345.931 217.512 li
345.504 217.258 li
345.115 217.248 li
345.036 217.365 li
345.158 217.466 li
345.301 217.834 li
cp
343.389 216.523 mo
343.735 216.25 li
344.315 215.457 li
344.249 215.284 li
343.782 214.935 li
343.583 214.862 li
343.433 214.988 li
343.348 215.194 li
343.431 215.27 li
343.611 215.195 li
343.711 215.183 li
343.655 215.477 li
343.573 215.566 li
343.222 215.427 li
343.164 215.366 li
343.008 215.649 li
342.995 216.17 li
343.154 216.523 li
343.389 216.523 li
cp
309.911 207.579 mo
309.955 207.389 li
309.863 207.189 li
309.632 207.252 li
309.36 207.817 li
309.343 208.162 li
309.507 208.162 li
309.911 207.579 li
cp
519.532 302.183 mo
519.483 302.266 li
519.506 302.355 li
519.615 302.355 li
519.572 301.858 li
518.919 301.624 li
519.058 301.882 li
519.532 302.183 li
cp
399.433 303.413 mo
399.666 303.558 li
400.013 303.512 li
400.173 303.217 li
399.943 303.201 li
399.849 302.993 li
399.729 302.698 li
399.613 302.682 li
399.489 302.916 li
399.433 303.097 li
399.623 303.241 li
399.473 303.31 li
399.433 303.413 li
cp
396.042 299.848 mo
396.132 299.407 li
396.068 299.282 li
395.912 299.193 li
395.72 298.824 li
395.509 298.577 li
395.545 298.8 li
395.659 299.257 li
396.042 299.848 li
cp
388.344 286.803 mo
388.104 286.508 li
387.954 286.439 li
387.877 286.323 li
387.38 286.474 li
387.425 286.534 li
387.504 286.633 li
387.634 286.749 li
387.743 286.738 li
387.875 286.745 li
388.043 286.971 li
388.307 287.076 li
388.44 287.028 li
388.52 287.307 li
388.647 287.443 li
388.737 287.446 li
388.566 287.136 li
388.344 286.803 li
cp
386.465 275.646 mo
386.743 275.092 li
386.442 275.074 li
386.532 275.399 li
386.355 275.453 li
386.465 275.646 li
cp
281.112 258.132 mo
280.983 258.317 li
280.885 258.399 li
280.864 258.502 li
280.92 258.502 li
281.37 258.295 li
281.654 258.295 li
281.627 258.15 li
281.112 258.132 li
cp
422.33 257.63 mo
422.211 257.64 li
422.07 257.494 li
421.981 257.302 li
421.872 257.262 li
421.519 257.385 li
421.556 257.664 li
422.258 258.064 li
422.33 258.01 li
422.475 257.912 li
422.469 257.813 li
422.438 257.576 li
422.33 257.63 li
cp
410.397 247.025 mo
410.144 246.845 li
409.891 246.656 li
409.759 246.481 li
409.655 246.463 li
409.688 246.588 li
409.827 246.799 li
409.908 247.125 li
410.211 247.355 li
410.554 247.562 li
410.887 247.44 li
410.947 247.11 li
410.854 247.157 li
410.777 247.168 li
410.777 247.26 li
410.71 247.359 li
410.527 247.335 li
410.606 247.199 li
410.397 247.025 li
cp
262.65 235.3 mo
262.64 235.028 li
262.436 235.117 li
262.436 235.43 li
262.335 235.702 li
262.228 235.844 li
262.227 236.018 li
262.532 236.184 li
262.607 236.187 li
262.518 235.924 li
262.57 235.657 li
262.65 235.3 li
cp
379.157 234.96 mo
379.515 234.781 li
379.722 234.645 li
379.522 234.19 li
379.221 234.221 li
379.01 234.352 li
378.965 234.706 li
379.117 234.759 li
379.08 234.867 li
379.157 234.96 li
cp
373.218 234.016 mo
373.659 233.852 li
373.538 233.716 li
373.427 233.517 li
373.357 233.343 li
373.148 233.262 li
372.943 233.402 li
372.747 233.438 li
372.828 233.54 li
372.927 233.658 li
372.771 233.699 li
372.682 233.627 li
372.533 233.368 li
372.382 233.716 li
373.218 234.016 li
cp
251.99 232.179 mo
251.99 231.984 li
251.73 231.593 li
251.573 231.799 li
251.319 232.017 li
251.625 232.47 li
251.99 232.179 li
cp
420.976 251.131 mo
420.829 251.026 li
420.507 250.529 li
420.379 250.376 li
419.989 250.152 li
419.569 249.986 li
419.091 249.948 li
418.498 250.124 li
418.11 250.387 li
417.782 250.672 li
417.395 250.869 li
416.835 250.857 li
416.299 250.587 li
415.863 250.199 li
415.386 249.892 li
414.717 249.871 li
414.977 250.124 li
414.798 250.972 li
415.236 251.588 li
415.832 252.068 li
416.127 252.504 li
416.362 253.1 li
416.881 253.32 li
417.445 253.17 li
417.792 252.644 li
418.007 252.644 li
418.24 253.402 li
418.425 253.093 li
418.482 252.776 li
418.417 252.458 li
418.24 252.139 li
418.906 252.327 li
419.273 252.502 li
419.438 252.769 li
419.334 253.157 li
419.131 253.571 li
418.997 253.962 li
419.087 254.282 li
419.563 254.633 li
420.3 254.984 li
421.036 255.144 li
421.531 254.908 li
421.955 255.239 li
422.168 255.57 li
422.335 255.92 li
422.761 256.496 li
422.864 256.723 li
422.994 256.898 li
423.194 256.948 li
423.46 256.789 li
423.434 256.528 li
423.29 256.285 li
423.194 256.17 li
423.477 255.577 li
423.844 255.458 li
424.063 255.763 li
423.902 256.421 li
424.627 255.87 li
425.039 255.709 li
425.568 255.688 li
425.173 255.083 li
425.069 254.724 li
425.812 253.063 li
425.905 252.562 li
425.828 252.107 li
425.568 251.659 li
424.966 251.066 li
424.627 251.102 li
424.349 251.413 li
423.902 251.659 li
423.503 251.519 li
422.397 250.796 li
422.024 250.628 li
421.769 250.709 li
421.271 251.052 li
420.976 251.131 li
cp
402.702 238.125 mo
402.222 238.723 li
402.437 238.769 li
402.602 238.764 li
402.76 238.809 li
402.93 238.999 li
403.703 238.504 li
404.508 238.858 li
405.052 239.592 li
405.048 240.239 li
404.735 240.103 li
404.579 240.393 li
404.602 240.854 li
404.809 241.248 li
405.135 241.342 li
405.36 241.101 li
405.494 240.719 li
405.535 240.375 li
405.924 240.067 li
406.618 240.426 li
406.951 241.04 li
406.221 241.502 li
407.076 242.182 li
407.949 242.364 li
408.782 242.364 li
409.529 242.51 li
411.207 243.606 li
412.026 243.836 li
412.603 243.267 li
412.177 243.208 li
411.702 243.021 li
411.41 243.015 li
410.674 242.196 li
410.518 241.809 li
410.381 240.581 li
410.16 240.001 li
409.86 239.456 li
409.529 238.999 li
408.882 238.371 li
408.02 237.811 li
407.14 237.585 li
406.454 237.965 li
406.184 237.506 li
405.701 237.527 li
404.596 237.965 li
403.382 237.942 li
402.702 238.125 li
cp
390.272 233.257 mo
389.909 233.089 li
389.597 233.163 li
389.478 233.897 li
389.155 233.747 li
389.027 233.644 li
389.12 234.904 li
389.674 234.598 li
390.38 234.073 li
390.91 234.656 li
390.413 235.063 li
391.02 235.477 li
392.012 235.793 li
393.434 236.056 li
394.377 236.716 li
395.153 236.956 li
396.718 236.984 li
397.646 236.863 li
398.32 236.562 li
398.777 236.334 li
399.065 236.501 li
399.183 236.859 li
399.15 237.206 li
399.011 237.252 li
398.773 237.203 li
398.544 237.185 li
398.446 237.321 li
398.42 237.611 li
398.354 237.762 li
398.264 237.853 li
398.19 237.965 li
398.19 238.193 li
402.461 237.206 li
402.743 237.285 li
403.05 237.438 li
403.299 237.445 li
403.402 237.079 li
403.272 236.755 li
400.975 234.398 li
400.816 233.897 li
401.139 234.077 li
401.265 234.126 li
400.869 233.588 li
400.173 233.2 li
399.343 232.966 li
398.566 232.887 li
397.951 233.128 li
397.479 233.632 li
396.935 234.077 li
396.1 234.126 li
395.229 234.053 li
394.251 234.126 li
393.281 234.053 li
392.447 233.519 li
390.92 233.203 li
390.545 233.264 li
390.272 233.257 li
cp
412.866 243.083 mo
412.817 244.426 li
412.706 245.024 li
412.412 245.633 li
411.966 246.109 li
411.41 246.32 li
411.742 246.889 li
412.836 247.67 li
413.075 248.223 li
413.325 248.423 li
414.528 249.149 li
414.977 249.346 li
414.68 248.416 li
415.256 248.115 li
415.982 248.375 li
416.127 249.116 li
416.398 249.435 li
416.485 249.585 li
416.6 249.871 li
416.749 249.798 li
417.146 249.69 li
417.301 249.618 li
417.679 249.999 li
418.194 249.374 li
418.965 247.832 li
418.607 247.6 li
417.903 247.45 li
417.539 247.328 li
417.285 247.136 li
417.035 246.892 li
416.741 246.676 li
416.34 246.57 li
416.813 246.334 li
417.436 246.194 li
417.814 245.921 li
417.539 245.286 li
417.279 245.676 li
416.942 245.729 li
416.6 245.507 li
416.34 245.057 li
416.143 245.205 li
415.967 245.378 li
415.816 245.583 li
415.674 245.812 li
416.127 246.091 li
415.617 246.041 li
415.372 245.762 li
415.214 245.39 li
414.977 245.057 li
414.566 244.926 li
413.715 245.05 li
413.412 244.919 li
413.211 244.313 li
413.442 243.852 li
413.818 243.482 li
414.015 243.14 li
413.845 242.62 li
413.425 242.292 li
412.889 242.11 li
412.369 242.027 li
412.749 242.664 li
412.866 243.083 li
cp
255.851 267.952 mo
255.576 267.487 li
255.818 267.053 li
255.818 266.779 li
255.343 266.713 li
254.928 266.518 li
254.152 266.025 li
254.325 265.71 li
254.391 265.395 li
254.338 265.076 li
254.152 264.769 li
254.409 264.769 li
254.799 264.075 li
254.981 263.646 li
254.975 263.363 li
254.792 263.022 li
254.617 262.559 li
254.39 262.154 li
254.044 261.98 li
253.583 262.006 li
252.038 260.745 li
251.534 260.15 li
251.505 259.728 li
251.686 259.275 li
251.804 258.596 li
251.618 258.017 li
251.151 257.612 li
250.54 257.344 li
248.609 256.8 li
245.811 256.107 li
241.318 255.563 li
241 255.805 li
240.776 255.892 li
240.796 255.961 li
241.21 256.17 li
241.611 256.17 li
241.988 256.242 li
242.363 256.421 li
241.794 256.545 li
241.007 256.946 li
240.315 257.429 li
240.017 257.815 li
239.828 258.293 li
238.37 259.442 li
238.011 261.024 li
238.428 262.486 li
241.383 267.67 li
241.787 268.057 li
242.811 268.228 li
242.985 268.65 li
242.363 269.794 li
242.13 269.566 li
242.452 269.051 li
242.417 268.678 li
242.236 268.46 li
242.13 268.425 li
242.016 268.718 li
241.753 268.952 li
241.21 269.313 li
240.249 270.143 li
240.134 270.295 li
238.712 270.295 li
238.135 270.181 li
237.473 269.873 li
236.929 269.437 li
236.706 268.926 li
234.973 267.658 li
234.594 267.282 li
234.355 267.282 li
234.437 267.652 li
234.826 268.561 li
235.063 269.566 li
235.381 270.263 li
235.738 270.682 li
236.706 271.322 li
237.133 271.716 li
238.253 273.205 li
238.567 273.355 li
239.802 273.332 li
240.206 273.433 li
240.878 273.728 li
241.21 273.833 li
243.462 273.876 li
243.776 274.219 li
244.184 274.37 li
246.614 274.105 li
249.241 273.157 li
253.635 270.942 li
254.281 270.819 li
254.903 270.539 li
255.703 269.873 li
256.409 269.123 li
256.758 268.561 li
256.345 268.345 li
255.851 267.952 li
cp
221.908 255.08 mo
221.384 254.9 li
220.361 254.696 li
220.018 254.888 li
220.542 255.125 li
221.315 255.171 li
221.985 255.149 li
222.168 255.083 li
221.996 255.073 li
221.908 255.08 li
cp
290.918 252.007 mo
290.84 251.497 li
290.6 251.216 li
290.435 251.102 li
290.078 250.918 li
289.699 250.827 li
289.479 250.97 li
289.479 251.277 li
289.566 251.556 li
289.72 251.785 li
289.931 251.841 li
290.287 251.813 li
290.648 252.029 li
290.918 252.007 li
cp
257.636 230.539 mo
257.585 230.389 li
257.451 230.109 li
257.287 229.954 li
257.158 229.985 li
257.174 230.182 li
257.262 230.492 li
257.185 232.821 li
257.346 232.975 li
257.486 232.739 li
257.665 232.492 li
257.864 231.837 li
257.761 230.982 li
257.636 230.539 li
cp
253.136 255.33 mo
252.349 255.53 li
252.7 256.16 li
253.655 256.576 li
254.592 256.531 li
254.996 256.36 li
254.426 255.913 li
253.136 255.33 li
cp
392.938 302.802 mo
392.955 302.898 li
392.977 302.955 li
393.001 303.077 li
392.172 302.92 li
391.999 302.832 li
391.849 302.937 li
391.908 303.092 li
392.099 303.217 li
392.275 303.397 li
392.519 303.485 li
392.805 303.46 li
393.059 303.285 li
393.054 302.946 li
392.938 302.802 li
cp
390.538 302.682 mo
390.429 302.718 li
390.38 302.916 li
390.713 303.138 li
391.242 303.105 li
391.289 302.898 li
390.811 302.737 li
390.538 302.682 li
cp
275.981 266.631 mo
275.923 266.684 li
275.881 266.848 li
275.762 267.108 li
275.45 267.411 li
275.062 267.595 li
274.654 267.616 li
273.673 267.996 li
273.46 268.164 li
273.208 268.45 li
272.884 268.648 li
272.506 268.753 li
271.822 269.33 li
271.405 269.479 li
271.55 269.587 li
272.293 269.559 li
272.776 269.412 li
272.909 269.254 li
273.088 269.137 li
273.318 269.072 li
274.32 268.568 li
275.687 268.063 li
276.271 267.574 li
276.242 266.92 li
275.981 266.631 li
cp
280.407 266.05 mo
280.18 266.123 li
279.148 266.572 li
279.047 266.646 li
279.183 266.658 li
279.045 266.88 li
278.582 267.25 li
278.014 267.311 li
277.644 266.908 li
277.546 266.848 li
277.663 267.341 li
278.124 267.82 li
278.729 267.813 li
279.803 266.937 li
280.402 266.554 li
280.914 266.143 li
280.871 265.953 li
280.407 266.05 li
cp
386.603 234.478 mo
386.909 234.484 li
387.536 234.273 li
387.625 234.039 li
387.879 233.632 li
387.901 233.398 li
387.653 233.273 li
387.574 233.381 li
387.532 233.655 li
387.211 233.699 li
386.73 233.562 li
386.527 233.632 li
386.538 234.237 li
386.603 234.478 li
cp
371.215 230.317 mo
371.215 230.566 li
371.448 230.564 li
372.022 230.188 li
372.463 229.814 li
371.126 229.873 li
370.825 229.997 li
371.104 230.114 li
371.215 230.317 li
cp
354.068 222.067 mo
354.31 222.134 li
354.497 222.104 li
354.631 222.179 li
354.731 222.301 li
354.729 222.563 li
354.973 222.802 li
355.503 222.708 li
355.813 222.376 li
355.624 222.117 li
355.151 221.848 li
354.954 221.628 li
354.741 221.311 li
354.078 221.164 li
353.837 221.084 li
353.935 220.484 li
353.702 220.071 li
353.52 220.194 li
353.494 220.513 li
353.564 220.749 li
353.133 220.867 li
353.094 221.239 li
353.405 221.598 li
354.068 222.067 li
cp
349.203 218.792 mo
349.124 218.977 li
348.91 219.153 li
348.808 219.375 li
349.032 219.711 li
349.428 219.957 li
349.824 219.903 li
350.083 219.629 li
350.025 219.422 li
349.732 219.369 li
349.575 219.161 li
349.82 218.893 li
350.231 218.764 li
350.438 218.585 li
350.391 218.321 li
350.12 217.939 li
349.7 217.813 li
348.924 218.017 li
348.577 218.569 li
348.896 218.746 li
349.203 218.792 li
cp
341.207 215.2 mo
341.484 215.241 li
341.711 215.192 li
341.856 215.18 li
342.013 215.352 li
342.207 215.633 li
342.301 215.542 li
342.163 215.049 li
342.034 214.772 li
341.921 214.471 li
341.502 214.028 li
341.13 214.117 li
341.068 214.563 li
341.012 214.769 li
340.895 214.742 li
340.885 214.827 li
341.005 215.033 li
341.207 215.2 li
cp
333.946 212.064 mo
334.005 212.146 li
334.063 212.319 li
334.216 212.383 li
334.726 212.674 li
334.998 212.769 li
335.139 213.048 li
335.3 213.306 li
335.535 213.47 li
335.729 213.456 li
335.908 213.243 li
335.95 212.994 li
335.813 212.748 li
335.725 212.629 li
335.512 212.34 li
335.008 211.886 li
334.767 211.626 li
334.771 211.419 li
334.474 211.331 li
334.216 211.356 li
333.962 211.403 li
333.625 211.625 li
333.721 211.925 li
333.946 212.064 li
cp
328.385 211.911 mo
328.856 211.785 li
329.376 211.56 li
329.706 211.293 li
330.589 211.181 li
330.861 211.202 li
331.14 211.131 li
331.2 210.967 li
330.727 210.88 li
330.335 210.877 li
329.541 210.945 li
329.289 210.952 li
328.797 211.023 li
328.626 211.231 li
328.683 211.56 li
328.373 211.524 li
328.242 211.596 li
328.327 211.843 li
328.385 211.911 li
cp
320.03 210.037 mo
320.102 209.786 li
320.36 209.643 li
320.752 209.723 li
320.932 209.675 li
320.967 209.411 li
321.075 209.378 li
321.225 209.393 li
321.314 209.135 li
321.235 208.846 li
321.146 208.731 li
320.832 208.806 li
320.238 209.041 li
319.892 209.444 li
319.915 209.922 li
320.03 210.037 li
cp
314.962 208.87 mo
315.296 208.954 li
316.276 209.314 li
316.646 209.341 li
317.283 209.272 li
317.52 209.314 li
317.927 209.439 li
318.657 209.771 li
318.797 209.678 li
318.95 209.446 li
319.195 209.457 li
319.451 209.596 li
319.651 209.53 li
319.683 209.298 li
319.633 209.192 li
317.48 208.942 li
316.28 208.673 li
315.317 208.312 li
314.649 208.227 li
314.508 208.431 li
314.706 208.527 li
314.962 208.87 li
cp
312.169 207.322 mo
312.338 207.583 li
312.73 207.745 li
313.138 207.803 li
313.52 207.926 li
313.917 207.99 li
314.182 207.686 li
314.071 207.365 li
313.911 207.311 li
313.674 207.323 li
312.732 206.746 li
311.947 206.837 li
311.712 207.053 li
312.018 207.159 li
312.169 207.322 li
cp
397.978 300.455 mo
397.298 300.248 li
396.955 300.263 li
396.588 300.455 li
396.521 300.335 li
396.513 300.3 li
396.332 300.227 li
395.833 300.668 li
394.637 300.938 li
394.221 301.249 li
394.821 301.432 li
395.373 301.728 li
395.925 301.364 li
397.533 300.979 li
397.978 300.455 li
cp
418.115 242.992 mo
418.498 243.55 li
418.24 244.049 li
419.62 246.18 li
420.492 247.098 li
421.318 247.075 li
420.823 246.42 li
420.202 245.852 li
419.667 245.234 li
419.23 243.648 li
418.687 242.732 li
417.928 242.121 li
417.088 242.258 li
417.508 242.514 li
418.115 242.992 li
cp
401.163 306.257 mo
400.759 306.028 li
400.444 306.149 li
400.346 306.715 li
399.763 306.439 li
399.446 306.159 li
398.939 305.468 li
398.57 305.091 li
398.067 304.711 li
397.525 304.587 li
397.04 304.969 li
398.264 305.583 li
398.885 306.025 li
399.337 307.015 li
399.779 307.228 li
400.288 307.378 li
400.688 307.603 li
401.315 308.053 li
401.685 307.935 li
401.762 307.43 li
401.524 306.715 li
401.163 306.257 li
cp
496.321 298.861 mo
496.669 299.328 li
497.214 299.609 li
497.823 299.702 li
498.963 300.019 li
499.608 300.024 li
499.488 299.579 li
499.206 299.173 li
498.716 298.237 li
498.409 297.959 li
497.989 297.902 li
496.291 298.209 li
496.321 298.861 li
cp
296.774 264.021 mo
296.489 264.129 li
295.411 264.82 li
294.914 265.266 li
294.706 265.901 li
294.538 266.189 li
294.128 266.489 li
293.629 266.624 li
293.177 266.415 li
292.788 266.299 li
292.46 266.715 li
292.138 267.26 li
291.759 267.534 li
290.795 267.382 li
290.471 267.574 li
290.477 268.285 li
291.612 268.178 li
292.678 267.717 li
295.4 265.896 li
296.812 264.604 li
296.956 264.519 li
297.058 264.401 li
296.981 264.171 li
296.774 264.021 li
cp
.494118 .411765 .411765 .0509804 cmyk
f
.694118 .631373 .619608 .584314 cmyk
%ADOBeginSubsetFont: Roboto-Light Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Roboto-Light def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 4 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 46 /period put
dup 67 /C put
dup 70 /F put
dup 77 /M put
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
dup 169 /copyright put
def
/FontBBox {-474 -271 1146 1048} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
21 dict dup begin
/.notdef <1C60D8A8C9B879BEDE> |-
/space <1C60D8A8C9B879BEDE> |-
/period <1C60D8A8C9B87DE052DAF2DBC128D720E2595608> |-
/C <1C60D8A8C9B6747BB44E91F5A44E5C956708D717B186230360326090175A
105638B12D17F3AC56A3C73AFDAA1267720B3D2E06ADE5219664A5624677528A
D814928CC4455730E265C6EDB81AD8D69A18111B229AC6DD702EB8C791958844
5A2699E9C5CA6B8562FBBD77F404EFF3BD046C0E2BB5BE53544F682DB39E9A4F
A2F254961613514FF36508FBE9CC6D> |-
/F <1C60D8A8C9B794D334AF09011CC83D8A977AFE03EC1D2F2DE390B5D7B3EA
6F76B640B6A63A0C815E> |-
/M <1C60D8A8C9B69378631BE188059E53E4B0080F861F384715EC0BDFF820AF
00774B70B3BAE7AA1FD29A541423D92F990337D7ABCE6713FB412F7215> |-
/V <1C60D8A8C9B7D61BE5BD453F6CE069F883283535B8C041214E48F8AD05F6
7BCF0DB080E83A6DECB6240DA9> |-
/a <1C60D8A8C9B78181CF89FCCF642CFE9EA6860C048952730488D11972FFEE
454EAE8147B085ECC51C14F2897E6117DABCAB72FE1ED473CAD7F18C8494C8C1
EBD2F54783164370942B3FBFC1978D6849E7BBC91E8ADADEED9273932B7FF0AC
EC898A546F97A1B13DA54B5370218EA8788537DE9A067188DC72373D17CFBF8F
73C671DB956E1560A6369F5C55C4D3D5734D8578607E5E98913D41FDDA7382BB
88DCA9F5C6EF831843BFC1BDAE6363C6E97350D63CB9FDC98FF7D578907FC031
5822326454DF4E798DDB1EE58AB2> |-
/c <1C60D8A8C9B7B8EB2AF4F306B0D6054C19C1100BB8EF910A7C2387FADFBE
8BA460E0F8B2E67F3AEFEE1B757C6462BF91EE64FA2ED1578CFB5F7FC23D1A6A
2F2A2EC073233E551E5C08B968C9ED4BEB89AF03BC9A1E0A1C6EECF86B26B395
27E8BEC6482A6534E0230E984E8CBB58A89EBBDD4DF0B271BEFF724002F1659A
1DD1B63A6EC2BB6B743D3B695BE2> |-
/e <1C60D8A8C9B7B8EB25DC2A432E78D8DA98C5FEEB76418C2F5064D222355A
7086482E15C640DD4B7F96D1F43F6126435F8E587B207D9D65A9B7DB8063419B
40A41ED24A5A60C52C860B3E9A51095FF96BBAAA1615B5FFE93EE676EC26509C
F848CA40EC2A4CDB277A71453CE0687463F31333B7432E3D96EFEF982FAD1041
943512AA033006D3FB56ACEDF00C47C33ECA641BE647436052> |-
/g <1C60D8A8C9B7EE7C2DEFD0A56810F6CDACEEEF2661D4FF881B8E16C2C732
DA2729524484103FE172C569A096BCE4C6EE4DFAF6FC1CB07F12B09876A4FD8F
33BD222FAED433206AF10BDCA98DE9AF100E71C29D23281662946AAA4EA1A7F3
73D049155C858618A9A3F748FDF253610758CEE2EC115E62C84F96F2A37BFEC9
91ED94DB82E6F6BFFEB3A8A5B9A3F5E7EC0651FA6546116E4E6E0AEEEDE3A083
2AE07420BFFB7298EAC473DA0581187316A8D652B7F4D176A5881E1F0C7D702A
3DCCD7AAF60B11156EF890> |-
/h <1C60D8A8C9B7EE7C19EBED65F02B761F1813C716406D53F6EA9D29B36E4B
6B390233946C6E2CD668292FB8E6A433746CF9CCB6DEB193B97083EAED70B9D8
B47FD427314477CC033276DAFDFA829454390C4AF85EF429FC53A1> |-
/i <1C60D8A8C9B88997F3B61BAB998BFD8FBD37E68D323462A94E3AF8765121
3078> |-
/m <1C60D8A8C9B598EE57AEB6092C0E332C5F9B7408DF718656450BF4C04040
0E781C99815404E2F3CF07415B0F8E868BD72F13023D0294C2C77B3D8E5BE3AA
BF0E17DD8E0E3D5BDCA59C9AB9AC9E27669B204FB720F1C4021FC2185084767F
C423839651E331CB839F5237CD5586A3D8557ABF6DAC6E8E5F998CE3EBEF5DCB
F035E2A20BAE0099EEA78440029311DCCF2B1223A9581C07999F335779BE0F13
7D844AC50683A585E1> |-
/o <1C60D8A8C9B7EE7C596447C564123A2E2BD67D1934DBBF29AFAEAAE04814
BEF077BE3496F670F616A330629EA9C4677BBCA1C86B76B01830B2BDB3932F3A
916103FE53FAF170DEC8E0DAFE3DBC54A604A64A4ACBB42989FE66B5FB794440
662F252A670E5BF88802F0E866A771484384E2C1C1D66B2BE82BDF5B0525896D
2B3ED74412F9B5> |-
/p <1C60D8A8C9B7EE7C16066AEB31BC1D50A6012C82270105001EFEF0953BF7
0FA5E6D6D83D8E07C7420211D9F7F0A1DD198AE9D0AB70BD9441A811F2EE300E
78BBF1A11D737D4F80AE2B9CCAE0DCBD1C505ACF935A89BF6AA7808E109ED0F7
F5C88605060BB873A7D34149F8052782E193AF05F2BD1E1A86554C4CBD2A2FB4
52D2A90FC666DD567D828DC65C7BE16024059424> |-
/r <1C60D8A8C9B817A07448DA411068A6A5D634984EA5F4DDF4059DDFD27DDB
85BEC7E37A35C1F63BF3BBD58A537A4788380A704976A4955F50B98222F6AF57
7BEB65610B536F276AAAF8B3A6> |-
/s <1C60D8A8C9B7BEB14137006B992FAE68FE5C96301D8EDFA7AE3DA0CFA208
5E264538EF8D8D756FF879D9A35E10594E6943D640F22941A67079BCC7F6CBA8
7DBC1AEF51BA8C845F9FE7CB104CE4FF51A31278ACFB6F21FF5DB94975ED1348
3711DDBF9896E80332BAEB6DB3BDEEB53F9042AAF8D89E5274566A33092268CD
46067083DD8B5236D3995D079C162CC11A47734D96EC3852BCF927B436DFF2A7
D69CFD689322AD0D226558BE820A6AE99E73E1333BA8261FEB3A0069AFF42613
A230> |-
/t <1C60D8A8C9B8286E8459EA799CD6F16BCE45FB2AA24DC8BD95A27140F603
BC94D3B91D09A52066E565A99576D2D453A7D7AC28C85225E88B769EEC1146D0
B04CD852FC9DD43F10116E3E92361EFB151C1B431290FCAE5CA2BA0B35250C0C
C5DB794B9027> |-
/y <1C60D8A8C9B752AB6199BEE42C14215B0ABE7188848D65C43051962701F9
A6317C00A5A63FE4868A0782B6276A2426FAB3497953848B3B66F66A2681BE71
FC40E1AC93CE4CE2010739A26873116A847C1A8D47057B059A8DDFEF30A0B525
38F618E8BF77> |-
/copyright <1C60D8A8C9B6D24F7C03A9BBA01D6C0EBAF6168E7A2762D828F0
B616BABD1F873A4DFA8615677547CFA0EB8C8055162519E8489159447DAC04B6
94B3F0941CEFEFA5ACB093A8069032CF7B563D13957CE80F4BC27CCBE470E3F3
BCBE6C6285452D5D1882F5AD8878BE994CAFF0A0766274E4F400A566DB092C0D
D205F4AD83739D622C2EB7404E616364E4EC08CF594A5F0D5F0E643DBCEE6335
0125AD0D58CFD6BB4FCDEF64AB0CDA06B2EB0E7C470B0E781D966660787799AB
00D6E1E876943F764EB36FC8A3BF6333255E8D68592AFD0D34E2B5A384F59C67
A781090B654BDFC3546B527E7C3319D06211D7E829AA3AA4F5A470D0BCE44F57
C0D6CFEF21D2661E651E4477> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FBRMHL+Roboto-Light /Roboto-Light findfont ct_VMDictPut
/FBRMHL+Roboto-Light*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period 20{/.notdef}rp /C 2{/.notdef}rp /F 
6{/.notdef}rp /M 8{/.notdef}rp /V 10{/.notdef}rp /a /.notdef /c 
/.notdef /e /.notdef /g /h /i 3{/.notdef}rp /m 
/.notdef /o /p /.notdef /r /s /t 4{/.notdef}rp 
/y 47{/.notdef}rp /copyright 86{/.notdef}rp]
FBRMHL+Roboto-Light nf
FBRMHL+Roboto-Light*1 [8 0 0 -8 0 0 ]msf
584.112 527.832 mo
(Copyright \251 Free Vector Maps.com)
[5.20898 4.5332 4.49023 3.99365 2.81055 1.89648 4.5332 4.5332 2.6543 2.0249 6.47461 2.02539 
4.38477 2.73633 4.19727 4.19678 2.02539 4.81445 4.19727 4.19727 2.6543 4.53271 2.81055 2.02539 
6.97852 4.38086 4.5332 4.1543 1.98975 4.19727 4.5332 0 ]xsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/FBRMHL+Roboto-Light*1 uf
/FBRMHL+Roboto-Light uf
/Roboto-Light uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Ted) ()
%%Title: (CU-EPS-02-0001.eps)
%%CreationDate: 7/5/2013 3:30 PM
%AI9_DataStream
%Gb"-6HWM1IP!8gDSC?AhgqI3,6V8dV1MtjC\G:l=D=G5e.A23sTaFj94lcM$rTnGb&Kt^dJMB<o^N9,8g$P?ui^mEC;CE6:#[P-T
%1cXagpA4YZK7D]kAb8c,Z^,ggDu[=nojR<#GB@/CQ,1bf;7Ac=4rip28#,1^iF"XVdouaul*m7-p?>5Jor`Xd3;@-%l*.McXdNg=
%clZ3?Q\4\AG]8#C[sp)LIbm1I5!J=UG;#>B)EKhq;BtV:Ni=b.m^Ug(*Gfpa+*R\L*nns-8%rQsCl=cG4-aFUj*7dmll7,Fcu`F6
%S<]-3pZRDo7d0uNbKhg0dGa'+BKYX?#=C*4-OFud#=KJ'op'0<*Z]>fGq,TM7\L5?n+0`OYe)e1*d,IS5:9hkNI*OW`mFeE\)NJF
%4,52qh<.3+mOgGI`*\DJr5WDn4Jk/qDVX@8Vsg368!A[TY&IB1Pa`%Ll#O[+11-@>UWQ7F9P`e.bO0h?He]S45MeXk6m-3lB(re[
%+/gZhL&RJ@oiAYNSWgsr['`o3U7^Hb/Kr0S0p!"1$8hDas-)\3ns:d=&HB:XnGdX:e%bD,[do`JHCd?.5oiu=KWO8tIC>T\S>lS1
%$o\e5hWc.&+*PY0?6OU8jsY;LkhhBW0e&)%-hE@eBL=9Qrh"YBf2MFI?MC(9=qA69h<n*p]fd?RpATu)[pFW9?_/6\LTgP;//'J2
%'$<EZluinN>W)E4@0\%5U^$j';f$T2qqWumdbtK<J#?:Yn_:C6U\2on/s^^aQ#%Faqce^)gsFf0C\^e74:FrD&98s:'=2?e51O1A
%?-%u+WR)X(?@>RIEb!bVn+H.fFqpVk%"#VZ4=tBMP^d]-kK:gEWq\eq,'A,mme.k;N;^EeZn<fNk+6Ibf%'cfo&'e<a4e&77'jF"
%X5Is$Y@$T[p_srfEr=ZV55b,8]UJkL1)P4*<8q>q<J>^-,_'r@`g64s-c86njB3_HG%]<qhkRI@o`a1-(6"Vkms*?WlK<@Qqto3C
%reJ56n+;>k/bT[ds-c1?%`\g,P>S6m428>T)%QN7q^9'E0)Mlb2kJo/D&MN5C]IEUruQc3VCFT?r'NYbT+F&Tn+LreUP&C1&cZM!
%45B5Ke%4E'*d*4U^?8!bPtL1)GCF`i4s[#QCDgL(^YA-uLXb?]COUA!I"tb+S)64D%_M\1+7r'jh]<9AFo0o6RbK0Ro.g4AcJ\JQ
%Q9!aVlQ5`q]fp!\lo`\1\'mA(&'"2G5E68crV7Tm*QklRJ(3.;Z\Y\>8Fsm?IOXI%BR]m*_<?Q.ef,%\`s9M"2uV:[3>m&(O%tL\
%jR\>tma1`MBuDEHLPHm"C!a&):kOchURdT9DGaQrj7eb_ORh>m60E2_l;2HL16nDKo6d4*g/;Fm0q)sQD`dX+N=O1A=6GpX$1k3f
%I=@G;;^nc,m&MSm,>%Q!Wd*#ao-gG<*?WKiisMcQ%EYgt))`BN2Pa%d.Gk^ll/(shO84d_+m-_DfV)B0q,J[2X-Dq@I,$b"$u*.l
%Bs6gN<#a)+UuG/9:T'>e,?8qc+WVn"V`VX,ajHC?>q*HkB;VE7.:5kKod!P@;+3.7kn6#Q;W0m(%q;"4N=5n`P4J#6rosLq@[p!?
%'<15,U-0kQcO]h6An([on8J?Z=qtZ5++N,c&`^XTH:AQ>pB"q`X8SRi7"@A$cV4^Z8f[[]5OilF,,m9nXnTSMWPlthRB<UM8U'L@
%EE>.U=881en=7Q`k*>T*R(noYT-'ZO`s9Muaml/*hVbkmbclcKHJTM]OD%-h@s"KBR/GX#/;12#refW=Vg!OK(I`6@38,Dnp-qQO
%^a>4n?_jX&+\aWTkf3>JmLBO<1CDXH2G\YZmR<"ZNdYHjhrm^oLF8jLf%+5JQl;q1oMb$;D7YnnInV.;nQ?URa8`](06_)nA3%?4
%F&r*LHqtLU,k"1%,oL1EX\7Y<l+_T?mtE+\%Zf=H/Y;m)W]6R0ImuR<W4cN0,gmG]S=9#$ULP8W>FPkgA&(XGejt(Kp="SCc8:Nk
%_<>X+c>S?q`W.9;[Zo@4cLCTq9C&h2mgNFu+dL<Bl$8&oh%[>-X=i(VD)OE7mG#D:RK$$R9"mU:+9+==3GnaeJ+1cJs4+]5cL_@k
%aSBJ>UMfB5KSl<T[5WN+NrqZq6jtWP/0@]$>*;;3)n[E>CRSI?BA4ETH2[2E]1?d3SPa<<U+-G$k@_*ua5P$7';M(_h@<:0S`,X\
%*MUZ+:+eURUignWX!CZm1er%/J,K#$XS%s0I3n6P/_>=&qX?4TmJ]T4?K)q&G8J5BpKDe*N7XM4'QjLhhedAhXh44Fr](:3B6K3B
%]O-c[r%;ppP<H,dkWu!*FU:9Nq"_U**qXYj"okY/PF;H?-3Qg759V!m>p<n3RX$dUY5Zu=DsZn4pN[+ro\?+(F.)Ql%!6%(18m,M
%5B)Q4Jh,%_5MgQ[bJgBDR@[<U-3)^IeGksiiUHNDmLCa:j<GI\2NMaDbW#@iB(+sYYiaCqpHmsMe5p]72gKtb(JGQ!+<IO@7mChd
%hnM27A:M3VK>[_+/H<2ar85NbhlsB`#;bB>p4`Nj?+S+=r'/sQ53S!Ha'W]m8O8DeK^E9Xr;%U,qq1m0)hn+`7_qS-3lWud,elOr
%4RX85a3^TTo&nbWUYXDN85+WErrphFh_..M6+J=[P$-a+b0@TK'Q4,Q&rZ3i<G$NqUn$-)G#A@dk2,+3^dS"D"A"#IJra#"S$Rg)
%=Ob4FbY-Y2LT-ptDW"[Q^uGrI&e\f*`Xa\8SW9st3Ct,X_mjJUU+'g+q5iQcM?(KS//*LQ%tCCLnjo:@dUrE0HcZn<?<J<\qCaJP
%:As)`Q`uqD52)C)9\G]dF'5196cfL/b55dVqL]0'g)5?T'_qFAT:)hL^W)`Bq,0?pe"$;^#OHT%;\KQ1oTY[fkKJ6(1>^fgFN2hU
%X.SQ"J5qRn)pAZ)b_N+Ph;67NX1iEQ?Qan"$Hnk2,@aoV#ek1kl!5'E^ZWKe/r@D4Qo1F3IND\a0=r7YWfB0P8R;:b[]cIOkaQ$.
%@\_u"GWK-nYW#I]+@56([:NtE\2U=Q;eTf_3)o)og>6S:N!HJO*F-n^ri8+d.M8e*gc;6lN-[uALV0SOeo6I:67d;,cl)8[G&Wjp
%\e(U_DPYXgra=pDi+1Ws(Br-1BmW8;cFDW_#(L9&YZ1"r82A]oZo^<>?'(!/HDiYnn36S2D)!cKmDG.?q`L>rIcFsd9[3N3/(bqe
%].pR-,U?FD+!#Rd^28APgEfaqJah7Do&lk'B!ZuT[b67>-6@>S0A<`nWL4SmT)6F?\h1.<f'7-kgtD*9p;T>^6.\G!Y97;^q^7s5
%DX7,V\2d2A_t%bcg`CW#Eq5(QW]_>Fif\06rt>dZs0Za"/H5:8^e[Jt>#B$d)k-6(/N$\E`oD)2oqJ<>\t$2%d_am%ll?an+>Wkq
%L$R&N5HW8#RM/hY4Mu(:e_M)V?+2nNSc6nP.rlgE/L8'k*/!";hkK-j*!=n)O22`)^W6up+7\#soJ6^&Uc_LgZ[;JO1T'\I+7+(Z
%_>-PpK)I7n,M_KH>+%q9r4^])/qBtpgIrO2m*pR1CqbAf)(#_aK7CR_(GhRA"/[h^LaOsCcCA1QVL6kI*?W5<^@Fg"'uej_+*MYM
%QT@(_'SE:hHV-u'*%'DahS#WCZT0a(g!>gu:!A_Z"!u(]PaH"&X3W_S;2V6=0'65@MCX"EVVJDbI5:5Nk._D7kD6NrnS9R2/Z7&<
%'8n"4\_irmd<)tI\)-X5Xf$(rcEDHEV&kT,,#'r'8`jWH\K;?jEEU\(9LR@b/Gk'GH*uk_$P"j-ohnk?/PPYYS0pRlRKgrC29X-W
%?N-2>E*Cr6k$JLW=dn8''Dn@H?cRu_1(Y6]bf3FqHkW!SjE`M5@6e1?amM9^lQSY1B%06U+fWe]`9G3QYF[)[,i*_kS*[e`^Hh68
%.4s4*5jEi32'!bLkB9Tij2','9*C)p7C%rC5)lAHE&urB)]Z&[I[]Vram3P0DQ!L$[^L[m<ebuC4*sgLB>5MIm&\WZVH`T^<"k6N
%M`dMe7Bg.iR`T040'R=7G;Rr8^ZEAh\\W67mehfTU;,]<ANrmIU(+Q#9)E2:^WpUYV`I#sq/O\BO[M;0dCCO!6t;DOP.5u'[+mnB
%2E+5HRr]4iY2A(6<MCMf?dEH\?@P)HHT4#HB-nOfCo>#/B2pjY@k6[4g,#2PmU:sDT;LN%mkgilT;:0YoZ)U`0+o9DlnY.%C$%19
%&4XerBW<M(AhjXBrU/k`7r0OLfC@XlJ9i!a.1sMVF';?g#0/fX?_nU17fcAiHZHBNALc^nf(<p*8E;bpn!qQ@3)um6:P\L^P5UOY
%mi43qaNU]qc+2DpmPaHI,S0:Nrg_YhZgmt>)m-mA:O5G5*"N:$]sP*3fsQold\ZsiZ8GUQB,4,Q=dO?)aW:.UdA-5?ge1`V8qPRG
%jW_74CCJ3CBodI(T>UZI>B.=Qb>MnRlBGqb+PJ;k0Z9T9;=;D$NY>b\B1J5__o>`"cFtcb[g1r>*hBW1%efTch/h=#qrDk11Ss-f
%m\mVPD^p<eQBFa[)qR?MMkk/af5hUK7bbWH;<L'-K!^\S3%[AnCtg9h9+o>`C:3Z%MkiqShhI?=06Y1J&9?^4k_57J`$Q!!_uGVJ
%R@bbbUVoQ757o!9Q%tpj$cj3Sn3"gC2qW!ia7&U9P3g-"OrEA+:0JR9EGo*Cr1*Fmc?c:_`=-I/9'eXOYrEKlk`keAFMl*u`@iMG
%.(coL_pQ$\4p`dISpnp1-;rHciW=slP@Ep_P#$%TnC.#K*#MDXquWi:4RUgXRk;B?nnC;^'@H5m\2WWD]6IJG3W`(orF3-*:?mk;
%A0@2;cB:;EVjIl7$-u5TIj'7DR7Z&Ypp?dWm"D+)qir!S\Ur.lrC#Gg'DH0^:?=$;LcTP=kf:5]YYI1q+8eO-dZ3R]HBl7I*fbFa
%S$*p8Cos5U;,u)!*-_6NOtV\:1fYi_#M[Y&XgM<tj6)bTnatYo>^l=DoIG"bhrP7*X7#u,[1BSODuR7q\+B=Ej8@WNmA7e\K;4&\
%qu'0Kf.PmJ\\?kbb`/cY<tABMjZAC(*o),-mb_1IoD6qTiQ4j"[VDG#=,h9fZY[#>F_1SRG%L43Vn&:T$b)-dMk_YCSuPr+]7+H2
%;`u0Tm6?!'^:<+4S'/K0md7+"c!B3k<S.*840#Me=hB!XGlM0ao(D%+H[konqe32tC-UDl+3`RLQVZ15gm'fk?Os?TTk[X%ZH(^4
%Q?K+'p57HT55a*j>+U*>o3.XJmX/8EppTm9n]kh9BQiLgeW[D/#J5=^%F]+[bNFkKQ+`5sMP\50_maj`Q4CpX#K;$G6'3hP<d)^`
%pVhj`fAB+beEG<NVu9BnqK;3&b+mc_Q^2NU?a$gqDdVp*,MmTe:T0`Ilce_@lAg?KZ[C[phd'o&c*,AE4hLAuG&d?SX0q'Waj#19
%+(%4A]<fu^L0qXIe\1VXWS1nSSRU6`o&WX8e)T8\_lNO8h]C)BH.$$V]_3?d\?U;QnH#0>_VNfc(YenZlUS:24M<g`*<#\'Y:/O'
%H[0tJo>o.)]44a$4"H@^YDI;=oks:HcZ\dLQKL=daQD_/1Uh:FQO\r:8(*0:lW4mh+"^`HZ[/\C\Ck57oH@JR="FkGbq?ZcrG]ep
%?iJ..hWnOF0&6mo04S*JKK%jY+/HKWo^,,XXV:@"mWrJ/?@KI@hc[ItG%p[K&Cgo2pr'"J&um;5rr%u>5A'Ad/a0Bl2lf_"rUR)@
%02e6eB-5M0I[eU=]=3+0Y2%q76OS53a26ZgYKoE&BVlPDGoKC?<^WjP*iC?4XIEU0rcj9!?,r>I[']Clah?+Ch07h+pq"r2>5:4k
%Z8_gEqeE$MrQ8$jIeBF]IeE*/p;Z[Oo9I#6hY5"X+7HueE65fJqCDbt+*QPFIQ"O9Qe^?h`nJSe2kQF`?c2ft]q_Y*CWh&`%FO\%
%Q_J`84/aY\2npFtBlC*1I'U2$A+tgV-dl1a!2dR,Gj`Q;rR[V/d\V;aln%#L)ZS[NH9=AOh74uo2CK.Bj6c>6/8CALd)IiD\Q@\W
%?JW(t(@JA:CO[u!4:`4A/?Gu#*4^?1G%jd$RNAY(i\h$#%YdZLqZil0VA":),h:rJ#OTiu%F:Mtg#K\Oen4WIbdFd2XnVP/Ptqe9
%P"COaPF#9nD<BRBNTGf^o%WHrqV57;?YLOn)_eVO>i!@e?)6"nFH&>*q8W")_<Ru/]CY<!]6J8O9TR*_LPN&\$NL(@lKqg1eQKdf
%IHs("VJ=gh:NpH.g"`W/QIarA40-&b[#sdm]4-g:c`57V"8DH[oGKl#]CGggmb3PJDeJN%p]=BH\nfg!S\;G]'jiMGgDd>apWT%\
%YA\E_/+[,.D_?GYmiF&$p0S?a>6f)M:`3&@;ZXq>[g(1Fg9o\SL\Ap)KBnchj0b^;]7-ESo>\r0onS+P4#de;\GH'h_oU6)L*n(P
%o!QI85Mh"LIp(HJ#B/>"Y3q5qdp6b(h"ktlIQb?W^tc'K(Jmhs@.6-[=Sapsgfn!-?tL=Yrr($0SL.KQDeZFnPAQqncM[529tg-l
%IDpl2)&N2"_!^?a"Qc!']8oF.`4pLKq^$<(pn>CsjmfX*XkI+t(EP3T;3ET9M'&g+>;GYC5.<IH[Trcr'8*1pEjRg]\T:K"XLV0j
%h_!X@=RI!EPKr:VnbC"2p13<!Q2\2'PW^b5D>El"h&dC1H@(^Wc=.GCqb*F]eMNJ52!:'jrT0F</,d%V4dSj24k:_Z8SQ4\Pj\ND
%qXnu"P%`ibXX5n:WL=!12+K1GAMfjJE]j?0];!Q42PG7u$8mF9Oe-TUB\&0>9u41nmMArWm*ep+NLm:qI6ji"j[jASgi$_Q4Pj25
%<3P`=^HT#oeE$I=4tT5j0"bj/5tLkOqQj;HVfkd><&6O<B92N=*K6t[W2m1i*^k<O;`4N/H]_8@'TmM1T/(,*qOm-&NVHXp/i#!5
%#Pf*me?9O8@W(\fr+(,D1H4/t>&X,8ShI#+`?2UYZfi^kAR\&b1jY/"B@<%m8>Fd/_jY8f*N)S7@4Gcm3K;Q=*WC"rU/mL+[D'=%
%l_Y`/ae9I?Th%aN`&MPSkfQ:OXFoY7jgr1kfHA#f-20&?%9*5-FKR@Idcf;NA3K?6s'(\LLIF9U7,p.ag2DY(pkub;N_!N\s#DMA
%hJ@,DIaVS-]\_J=F24AamN5H@:V5fhqV%:6n*[8_\iGO_/aI<3.AI#bq[1G$/)M-">^j)qh#$_hEHUI!pM7(D2.R+[IfAs!:/_pr
%IDa)GSCT#_4P\GOrS':!MbNpDd>^BV9lK#RQ<dgEI=7tr4udi`Ic\\8mn:nX/Ud&q?hRPZ(,nGe[isNJ/fpG&C1d9TET^JJpj(il
%QaO[%fD4<BI%Z,Wlf6Nd>?g\liKh153*McImJW=<c..TWaMe51j--L?NCmi5Q5bh4>uS&%o.(<de`#4i:W0\?"h\uBmIjrel,u<G
%BG^k#P3)Z>s5`ZiJWgHL;#fM5jT6fr-k<,2H5iE=KD!.hq9uhL"B-Ae%3Ojp]Xmr6`MU,*QWV,,8Q?T"^[C$rkO!NRHMH[GPGN5h
%C:LO^oO@@.c(u4X5E8lGc5o2(`>PId*`[IYh[<6B<ZZZ@3]6#<n,W!##ho64`TtG7XnKc8-T(4)RE?MO>Oo*VLQM.7#WL3nGd)9,
%p-8'"J?#T0#H+'Fh,nslm:r!=fo$$45Bc8BXmq&(hm]Y$p9&a#=ml,^c7fXXQ.\95D]UOV;YL(XB'8:S%D2E#;PhFeXd`Ujf/NF3
%ja_dZmIKhaT9ntBMa)]O;rH[UFa+C$@-QFp=ZWKDhfEM*gqgP[e'^2Pa//W"Re,4'h4qjr6hP]`,TW3%(0:I*9;N><T0D,E]XHNY
%_=Fs7X.rSTf<$Rp+3J&*rUJ<okDR[RNH[n=[&GGAY-q\"gO+u*H2R0oCT_1h>g&"C-eltRp#EU##G[:HE2r354Juron#i+Z8MbF)
%EB$(*jmG6ZF.[6XS)(jV"UDj)Cp.#ke0o_)Gj41M4'B_MX]M8j'BAT@;nKX<jECC(jhB(6g2^A$]sTitrUIe5Rl>4F@U3p9!-E"c
%:YXFC[C+=>/fgUgq;T9bVuG\F(UM`]*6`<oBK*$,noSg>l;O^CLUU>+%rZpER<Eo5>["fg8^g;'..(KefS9)Wh@`t(o;e.Hf6YU2
%QZ8cH=N5Gd*:,9O7_QV&LYEnAW*'#44B:GGZiQ/,?X0>M4>,[L4BR&Qa@Yfeo$T=5JK+'LO5!IeR9^]R5Ft!l?.hB@DT+%ao/duU
%mq4/o%kl,gFF.ukhOGu&7,.Ft%tCMSj]Y_Wp$heTdc&tS6\TFO=Vd]GUs<VVb)`Tq5@+4Qc/6:CpjMDU9\R>ndd/2"*3NNm@T8Dm
%#OS^4cbJpC8iFo.5O]7l\+''=#Z/L0VoP9jqmdt((@p#DlDKX/cQodN"n1-VZ+;`\rRl?MeI,i?Db?-&[/U!oikkXqf2`q5ofar&
%f5Kj+05`u2Dnk(r?,O7aqVYkgoZc_4Rf\Ob0Rq<M4Sl:2',&AZ:-uU>@IpS_QWr(ECp&3#I-ob4*g(:'Ye5!ljmgQS)&@L40#6Jc
%rmbpD1TK@$mTnL.329MEgZlu0lKld"fA,gK?H8\)4tXL_1*3?nf4gWH088rm)@hHoIV\BF`4,'!Z:>uX/8,o8b@SBTe$"+FGC%kJ
%4=+/!<dS]Fh8>^pF`&CoT;?;jIN3b1o=S&+D\gZBmVY]E\_I()iu@=?mQB7=gKV?KG]/C4HILaCCEFW<NGi,n]!$tDS=3*;8$o`f
%4V7/GIX(`tq:Y?)qbn.rmllJm5*/>6r?[HqiqJ2[W't9=7,^)o#3,ND1WEj`(@%(pr`K'sE+.jIh:D_6%cjP2QWEf<^C6ET^L-Lf
%^YMAkJ+(eCXGOl*K=SHGfK$++m`h6p`gtX-Mg(MJRprq:D..$rGe6!;LL+d5+*X?Zlr@ET=5S5Bf;;)BI2uYO,$EjQ]Ct/jj!KR?
%3G"?f`IIki2kQO]s&!:+h"r>WB?cV)>C1Ln>uWI[T)?7,pL8eM>.B<qpYk5Ajn?an[H5C+QOg:t@32hWq/>Z,PI,7W?$s?YW3`q:
%12\q(q"!P(([o$$mOsmH_p>F,4JS?FHfHH6(X8f>#8cd.aFBDM/3Gn>H8KuPGjl:Ac1gsVhke`CM/08ST]1GeF6)Yp`RfH@-]Q"3
%KuYPkF"_`U0A_!Joije(VgiQ;hq._JH?GG&mJ"'.<Q*;tm=u?BE;abTT_mtH,^7it.IqH<AEDdJd:hXmp=efKN@S(;d>WJIIHbG*
%Sj,AP?MmRQfsg],5i":R`:VhbP2Wk3=8'(WF<8["NZ(R\dHKVW#?TM04]rb2r\Rs7)[toTR(!gtU\cuh3V7K3H1-2g0;Ed+J](AM
%I4M&Dg6K-SH^XQa%TXY+]@nRAUC*a+h0JsJPfg\O2Y1VV%1]%\Jm5lnkq7A#6/lF`4sQq?UAX/tNRA@+^*-qL_:SC8=j#tcIfJ0^
%_S,!Qbs`MH,Pnf0h]QGf](J8BHf\;_rq;Nl?lA*cC,cqep!]Ac3cgM]I;Q[4]&WZep$K:/B@,sj]@_MB7cX"+H$dopS,#W57/\Lp
%ccVUuTdng3o5lmg]liYpV$em.M:o(Bo<SU^o_-t*QLe.lS_<mU05,*Ka]<WB%K4H/_rL2?nZ;fp]caZG_7RZR^4)"ba6Xn/h`kui
%Lpj"<98CLG'g??qKkS9H6uhf$XQ/E5gNs=GeCUS#ip"?"g!\j<nX$4rIUf64[drh9m;1a-;ngj-K7%>SG.P34\;\V&XSm1D5$ke-
%nU3>':u>#GZR>GcY3+I'cL9^:STHInf2g(]&#U_8mgid.o5XWphU/`HFLqJjC(]\=WSf5qn'sE>E)^n=TQ0_NlKlO`=ealQgZPEF
%pQX7hP:KW*g>#h2;`1QJ2iA'!CH%[`qK-G@5@8qCbMSYYX]AeRK:0D3H=,3]'!)b[qIA[,NH[@u4IbeF^9aK<DG7J3q/AM/_[M<Y
%`S:@AG55N&`^Tak[@,(E?S@mM8#*]P44fLkf.V&!X1n?,LrE$Ld._aqPH=AO?#CbQ2g,I=^[GNO*g.'oaR8JeFGJ>(G]7_8^6'Yr
%1%WV?QK,TV2G"bC>[(FfVocYuZF0SqBcQnYb`omli@3$F2jT,]Kr==_>Dk<rq`"BceaOPah)Y<0F1](JpH(d^0K$scJ*M6Egpc+q
%nG:\Uf4ArOq;Ln\LY^j-"T*UeiC3`[jiN^?hp]:1F>h3SCRo7AMg%D",)N[O0q6j#hfjn@^]-dXnD80^je7/[_3-lu(IpF@rk@sa
%EDEk?o$['h/gC`M*>JX3"W<aH<k.o&k2V_tjj(?#S%\Wg;uA/NY/I^\_tnGk\D[2[@dD5!+\lQ,([lgq^4bt.W/#-%0$]^k*MRt2
%D>'%al7T46XnJ6LIJ<7N%Fo^.Tu`HD)qR<Wh@;u8=PV0Y79:,tf'8g^h4:Z0cTZ3<XF9nhEkp6:]8s+IJ,Ms5f=T4!hc?n0?%'Jo
%rVha"#;cPoDm-QU?5fhH`^IAqo39-t+$=.i=au.TaU)Y7heeHnqec)hdat\s*^86Q9S_YQS7YC.?1!#"Su"^lgaQQXRb`op:o;h`
%ZZLHHCd!#MDS6+Xqh"AuW+c4ic0oEUCHJ<_WLjB.UtpDQ1WGAU#d9igcI:d$F_gQ(:Kt^'[EE"Rio,;Lia0BL%;Or+P))J\k5:.8
%.j)OO/PW&p2eWHJ"]`3b^TpnsH[g4tiQ8paMtWF?j@9)E'O/ViB</X3>"]r=p6N]GXR9q#JJWfB?CQ5G<44`WgjB2kSK?%Llf4rO
%lP58]fioA$TA%)M"at^&]!epChYsU8mDZ\52FsdhDS9>$Htb7':qXOcl/h0`FZt/T4a^(D4BhE?"AOmUS_g8KqsCMNdET[FM70f:
%*-#ml<aDgZ0BK_aA45_jm*jf@W``P22nP:Nf]p>UPEkOCRB9+<`LG`84'iW.@GH<52t4X`>0+o*_OJ+5VO\6AV)Ogu=Zfj?^\m70
%.I,m7kJuLp4+>4%KuKUnAp9/N.#pJs3Kaj6ad_B<@S0^Wji70j2mU-C\"Cr1rU[W+97H4sDEq[na.'Q:3A58Kf>!j&SDTsPC4-#3
%r`*BCAlkVM<[<taIAQ%NHp[_INS"3f^"V[gd^Tca(nqOm`d_5r;eJ<3#S/3:[#\b(Ln=iP35\+$k!LBOJ*Z!4GrX9c'/k`tD@,I>
%1AGL3e:A:mBkPP/nie)d#<N1._,7Zoi(:,egGD2ZD6nNX#R0DArF":RZ!<d=^,Y@6r:J;ldu?@HfPt;YRb]$Fs#CpF>A@@.rhRhH
%4.6*oUICHo`P$t490d9b%h<qJs'B3E#1LSekDr;h7ZF*%Hht\Cb36XSSR:8>dsp=C'C1VY'\YXd_00HBnb8e[O$1ZXTK/V:/E58+
%g=q7p/lF,oiLeDLo;eFNrho&[H\:pq@4Ha*ZCC4KWL86unNi*ip8rSH9B4OVlQoKkn2H0RQkU@(qWGeQE9Hp2'Cm+urs^'[=JGXp
%ds#66^Rh.-d=7OWT3@'\hrnd/FeOUCIqu3gf,b=_[J)%aEMD9%qE+\9:`X3G$Co/urt_YAJlB^9082/@DgG0`ou?>\YDFpEq[!5o
%$W_Z+Jo=]Z'5*o(F)0Di67m,)je864+\hMt[8YE/>14;C!RL,Rq:uk@dNlJ%ZW=Z4EDIS<St5=q>&OH.)@9"ZrdX"Grg-:bcduu.
%7!/;$=R_PYqN[u'Y9VA`hg#Y>pZ$k,ATQYkmrjF%RBUZ`-#]>]$lKMi6m*[pmY]g_f`nVtoZ&U>EYg(dqLnat:]%[[ll7)p^RXmc
%(6eC_^n*b&Q6q"1I[X:rJ?;9tWXCA.'_(2c*ITg1nnd/t`Whg`3hYl;Ks:O9K5O=fG$?2>po!f2K5SF]lMQ?=e`jOc]h>/u.)U[k
%[lPa]XH*lHJCn+b.Rh2Gmuc\#./:j@UifAD]1!Z8(T`4'5r5=`I7,[Sod*tGEH&G<U5DkMI2_G&G^tBh\ud$/IHe*K4-K%;6Ci8g
%o%B%>FJG%j"#TdMItc]mlb]H0XcK@1$+5)`=#[':C7Y"3+]@FWcZf!%B6K$Cj,:3,XQRm=]6/(5[,(3C%aXffS=&>@kD!8%KC)D"
%[-,_)g0rl\[h6RC_QB4;(b["52hlES7Xqsi/2>:nkp/TN<luXbd;h8[VN7Y$R#PdL;kXEc4I*WN<C]8aWEs%\edm1s(1K'8(&gF5
%H%>58M"B9Pq1cD)fU^UjI,_!9k>]C:B!TFeR?BIq0A?4>'lsd]qU\;rG5\%&>/*Tr>.ff[[>lO-kW8_'*WOJ6e)F1&Z1m!;?N'SY
%$88s'ID\BTb`-na8ao*RaleLFoOf9EeYa9]d!?ol,nIq)JCHBq`lG@Cn<o9P=[(O,S3&9bi8OiZo)sQFUg\6t$7GeM#ep*ZdkIO&
%7;D0,5Q9NtfIG)[78A7^4:Q5n6#(qQ/5$2j_ALYL<h<KW"U7\h=TR>`ATE<=Y/mR^"cLS4QrTE.T[-9"mmTEARY2P_3l\hS$3Bb/
%J2jS0F*(SO;\W81QJMp]kDHPN$l589&Te*-dO3,s,r/DR][CQ=>iE5SaP]\lZalh$Nko*q)aRP%j#EkEGmssW7-,8Xa"d`$%Ua!F
%)/BaO+k^_#gI07:F%ddABm0Uaj-d].ja@9rVbl377T1'Z&"&Z3c6iZl9#XCqMgG?'d?Q$?#g]Wp>Lj[RVSK,4%&'K8%afe9O/8VO
%.%u0:Q%]L0Q?iUo)P\b)\V^ToAb-6<E<90^+i=Qf/:<6r9s:(n4.B4^Zro'kQ:/Mj-5!`JFr%n0&Th00g?i/-9PdR+<k2U<Ta:h/
%c:I*?6timd8s##2$ot0/Bdu..)@2L;3^j=U$6t6;kT"S5J>H>!&=>Od0Gp]n:-ISp"8!c.&TfX=G*eHq''X)J$,e$m2M/ZaEX"&d
%=2?F%TVn]FUf0+FC%6NNS]MP4$%tRb0f)P]JkL46*FNIC@NSm3NQh!ETsR3g=`)rb![K+SQD0E\[j>W,J\bM'_,-Gh6#)1P1ip4d
%7[gm1'mTpLM<.>YZQKt`/:o;fA-saKX`G-i5!<XAR\lUMKg[^"7*'&=*=588Vo?m)$i9upo*l"?I<_M0bupN5W>.Bm`C!&BP]C!(
%ZlC5n5kGAh)k[omJ<[?!.(_.4&4)dgPY(2sPqH&N$H@nJKo"EPjpIQFHR1'tPI>2OrNW'CPVhJRp^1&3;7QsE-+5?+$QW`-T!ibG
%>q)lC1l[03QoDC$4KhlU>Qrg^jE1s:LsqhRP7]?!nd,(i'6<LH=sHIji"K^IEDZ'S91A!9*3^X=Bh.M@cPaoI:$1S)*[GY>XH0$^
%i6jXU$u[=jnnKP2"J&L7=prOi0f'9Rj]+R1c@(h@<GYEBj8,;nO-7c7*WtPmkK<4R"O(qe(*JTgP[L^%0goeX#\7Umb:*re;^j.%
%,YA0]$>1S_TbmtiR@1UZ)+D5L0Gh/*/1ZOeE,0Kdf=?`H0j(<AM4N_]lql7b2!>=L24nYV/DEuVaGWg0_H?%FJ(<m'8Lk48:3k/7
%qF%nTll%:'f!;Dg\f"spQ*2%KSC[rV2_Q!NHgs:O_$.Zfnjo5;][$X1Cns*$VQ'JmDI,YmdKf.PblGDF$d@>Q8!$cWe=GpF%^;[e
%7rnK3-4R(aW[8P/jUi_t,7.YAQOsWOb6]#cPWP,?OeudB,`ntM@%#.%8(1`m"G.n\#ZM+t':TQ[,M]oXQ^Df`*Pn"-?K1$G"IVg]
%oV'DPaH@N.in5Z1P=)37Bb;P]fQD(GY7J!fNs%;-Pod1QYqBEZEf6$C.Z5FS(+1Ph)Q]lI8pFD_0GI.>;E,bX$J(%F3UT98Xn>S=
%T[+4G50-\GY%gnXghWhI^_(7Mo\S..U&jhJY0sQXGL&or&C"E$LTRYbk9Rms#ZaDB/5b0?m$!*\">/g-&p"AQWln;k#5p//,4o58
%4,FYJM51R,j]*&3!Wj*%qB:iU']WY]N\])"83MZaF50"6?mTA\8HXVGZUWnVAB2@,6=A.Wg$j7!E\Eff+h!3PC'&!2%V@#=%"h;*
%Q\J$e.u;jc"tMhi6<RfpJp#C4k4">/bfSpded@e`nL\=Gi.piV:#H0)FYk3`6#t.#E=Fu"?nb-5+t:68X@2^QFTo$#!=Yg0&[[X1
%))Ob`M/n>:C.JE,8eP<5E?rK-YY&VCIb=kd):+b%B,gCIqV4Y73Y7ShUfHgdFLhY_XKk/j(;<>m/'m5`TtmRjV9,Pu<gO11l*]W!
%6KH:KQ/!Nn.:pMH"Z/-BR?2ZF$sTmX&m/RQ')OF"l+hKg@0i-fU*Y@cZ!<\0E`\C;3(eM#ebFq8O:uk`$_;t"A#hub0\qkUj9UkD
%82+--'n^lp=;S1q=f!R472%("eKlq*a77)UDmIT>>m+Xp,hCV(jVb6nU4Cj4aB@2B!ENOPb?SSL,<P:]EP&!W/'ABr0sPjOAT2W+
%e5M*#*Y,EMF(5@;PTc^ClQS,&?&siA:$2aW]R[^E'.>Aek&&m\34ug9&lg*NMC&TKl&N(mpQN@=+Zq`@@k=skck8hn'L5YZh=:j4
%0`XaC6<atTAL&SL,=Ko3dP;Yb!b!@g9>[dY,!GlWGtAZR/*,'t+HB_-I8QdaMqeXVik^O<&$]8\&"U\<aRDNo+c(K/c\/a<+-dF[
%`0(sZ`hhDb4:X%Z.f']i/2M.5Vm=hF6C9Z*T/)ER;3(?$c<cbcCHELr$_b2UZ^RCaOP6\GWUZ/sUa,'=q]PDq[%cr>7ukBT8BG6W
%Pg'e2_NPR.[2f67NbJmJlKQqg[:H)W:fSsVn2(D;EJbB"'>%Y6jClg+1$bZ0)fpY.=ih,UTboQs<#lbV@E*B=fH>"%C@TS'8A$UO
%p-ASrntQQD+9qOa?tHLreC1*(B588)@qK173MZ]h&%qE=A.ao7#$ViT`&rWfOnf-j$541aAuU_/klTE^cBEPmni12Wa&kfb5cJ-l
%3GE[LFL+;r)&=pOb^.o)4g[92Kb6V(`_H0dUFFROU8.hR*0qOrd`]L:21*>Fqk]qn4Ci\59'8YE:)*mF9b=EpRO(W<.'Ag_+C1:K
%M5AM+;iT;HQaCsK>WqkX'i%+=.pNpM_boDMLqPk@,46ir1j9[&OThg;+C/U\m(A-^Q!kkJ>bOa"4Tp*5RmhXnpGf"K9O51D0R()5
%QVbq<>#D/TL"]iuIfPRuL4\7tq,EQ0-tKkU6"RT*oFO(:&gnLG^[e)]83g2YZV":kV#uP;2h3W$<A8L@-UFTpKd1Y2S95ZjZF2$T
%PEa;5(hA35MuM9tLiu9cWp4W27D[CPZ=]@O?O?<`5]V-6<W_g0#0H5T,*n&P"dga=KG?HJ10CC`;P+>r-A]_jjIt#4f1qUQ"KH>Z
%RR1HP!*Q)B\oCf(PLNU46Yd'(.[)9:R[-8+Igd7!IE1bmnu7(a<MWL`9BA%48+r?!_rK\^+<;2mUEgj1m2W"$BZTF[UEC6T>WYmr
%c:-*:.Qk!sf"Y^%!9d^bRAh3<0)G+:gu<Kfd"l.j\tH0)"hH;\ANCVnDB(pF$COjW5\FnhA_JX.!kPIj+C9tilt,E*aD2f(iI$H@
%(G-OB9ZZf2''g488i)sF2Od:u>on@R<F&*;8X%k'SB`oTH&DY6V\6.0FbQ_`?$TG8km^6kLt_Ai5_mSb+>lb+A<9]hMSUjD^$o\V
%X60TX8[l"JB`.o]'pSdY7#'JDdk-H_QNk])4fX?'h4iP",&1FV@M3[^[+%Qn@C'&dk<!QqdMENNTRWe-<Dh2^*=hK_Ue@,4/ZlCL
%7O:ZY8lobY\i_uY<_>=HLR+<-S<?udR4"*[mhfS)W1Z)<dRX+k^lfJ;J1e7a`tIFcSAAG7.#V9';ZtMPcW`5C=giE-mBPS4/O,$\
%+>@Pf!4#F69?7dX^*n?t=<JoWYHD!][lr@eK;ntS=B2k3+tu"<ZOk50DHj%`Rf>"+3SC4\e,i6Eh9:N!VA=26a4m[-kng"FDOi^s
%]g;cke(2UkXXZMbFKX*kgj##J<`-/UTZ\,(_:empg+&u<D$!;3i8HSGHo2![ZS#7rMK")HV&o&%d-T"4bJ:NP8aQhg#as26R50>W
%"AqKcfEOT?&cjI44M8gId-)`!_WeX^^8_6e1a.b_\f@cJKG^l*Y>fd8bB-LW1Ob&cN.?AE6?s@FG.@8+KR#Hb@XF<8%+#5qPQX%F
%;hmV!.pE4QZ3ap()Z`[g4f_82PJK"\g1GBFjfTEiIWgSg8gPFCBSd[>d/sL3NJI48>U7M:_%@+0.Y-$F,(cn;#&&s5r]$6).?]]S
%dO%ij<<C0U;Eb1keH>Gi3Gho/XUQaX3a"=8'Z]NP[6-&Q0DC+3;aRa3,TrW\AP;_H`c=\c7Oi.)H3;CQ@RIsOn+k)u[dKF;ksZ/l
%iR5:CdK1%1TdkFni&Tk0Cg/`V.6B7TO\#,caB2ckolS_l,[.")ROMhdZ@,JU7A\Q;I&dl!.@V7D[8It>aq5ItkbR""0tq<uN-/`o
%gmg1'DE#!1!__]Tm`b3T2[%(A7i(5[Q3K&+S;@Z=-4_T0dR=S8P]5__0M$h/&t&4UaO6%[5j0>A("S(pQ'dZA1eGa/#u)RN4D4iX
%F!^5+1rFG>HgIWBrZRT-KKuGR3`n@Re24_3Qd4o/%-Corbi=Z)-eKbf=h"kZUh@nN3YX2F3=):8#7OX>EbBZcMR9T_i-K4)5\BE4
%+>FtkA.$ihi@^]=U4?Qgi8l^8,D>I*qZLM6OHaaKA;^OmWdG>I)GdYk&;cf<^`5BSk(b:_\oF!*#=QHsjRnN9?tR3e$<A]*OH1l=
%=tk!K`oJ\Q9##XP2ni7lO36]p;E%6T5CAq5+l_%;$G%s5,Y*uRWIodLcU91@#A&Dqi\?@[Y"E7dUJb[9K*"TlL<,uLGp^]kU3BLs
%#UdlUJg0s0kE7SMhs4-pllC@3/3V@R:t91r_FtG<L]@mJ:W2<E_.h9S)NqGm[0'q]=7Ad2S`iN';fOoP!D$.W[QIlMZ;F$+Vaj9J
%8e%.`<-i"&9USC)pYMMD>opXjO-9ZM!^n%Ek*:3WIuQ8`_uN*t?=lNaGkVZO^b$,5-k4df%qW?HA>p*.(kB!OCo!34bL\XKQ:`#-
%?X1M*,N,:p:X5?q)>;Fm(-?5Xf]J&FcClAObGE:u\^Ks[BU%aBLk\qbh*D;sE8PC4orD%pcJc&HBA*?&=euc9RL5Vk5+NlK1k\\]
%Tub[8>!S)=+S/%UJ7sq.%%8qEN4d;R8a03^K'fb_pu#K)(a"RcQ84AsZS$jRKdK:;6[&TgSNsi1S$q",?$]dN8?Aa>frW>PJJ9fn
%V8?ES(V(Gc=<1e:_F4h[K=.`A*dJ$[P'@0>c.K1p1+%UuA7@,'b%R)-bE@ot0RGTY)9_*i22k6R6ZNCo7^h:Vo22P,!bIk)N9G=#
%FLVT!JjT2'-@p48Wqb]F4G!SP&C+V)E&q7GH`l1\_2s6`":d>;;i;b3G\FUU16tIqYLlSSX'2AY5fZ2-6sPp2M[3QrJBO1]!:,2p
%RFNW9`aM_GRHTqOA3Cc^V9L5%MGb@W7B2X*%>>S6L58h1B;^XK4s*))2J/CZ<>A/kWJP\iW]&ML-H@9hc2C=.agOeAq%TMF?BUYk
%c&+t4NI\Q^2N`tp#o/JA<=qMt?1W^UWT/(k&1m+#!LC7X`Z1f'6C;L7M-5-Fccp"D0$Mm9jd"l2FeZC5*$8k_D)'R7LFfDl[$+,)
%aN\tDJ7/Heeq=<p-:gS<_'p4Y>Z.#rS=3W,15OtD//eT^WLCKHeOR81buHK/7,;TufpMfaVUJ-D6'ce^Q?b)QH;9mPa7?aa.:m5A
%P%:sO^pnf58tdTq&dLR$&YG&Vb-WEMkSVqle5pcbAmJDfNQ7kNfk:]#?4A5YQ>.+7<f%dWJHrlMqiSt/S/@.FGpM/Zdp#V*-f.!g
%:T_X!3KAZb,Y)%OY/Mh&G@giuGd5HTbsJ]T3J.Ah@)9X'f2F@rC22`A.4&>8AN0eWSHfY:QlZ7V"\$peYr5oaB/q%m1XY:tpJ2pd
%8Wo1"'Qd.anVI:>\'b$\;A8@6gmfG&T[@a>m\DXPC\?Bm9*_rj=e9eY=HscOn)mMbBo11GiBA6S$-?:*J=Q]tH4kgD-L2EJlA6Jt
%Z[#q%pgd=G`flohD'1=pV,eLKS.6&pT-9mC+["mFXN\J=ctc=X-]]_,p&u523*ZJ89iQG(@aGH9h*V6#Q)(4l8mq)_@`F;9N.Pl0
%$IH<4EDpR-R8m"63+_?OQ<=e0RN6G(&)=GMLMAC\%fpQP$1pNm)[mKWWXPmn$:*2("0A5>1/c7-THDH*X'\'*@VuA"BED^fesPi@
%Von]P4>ZR3g7Z"",#@p>Ci%#@2l=$]j_JsEJ!F1M^d],L($i8JQ\`S]M`"m3YP>?e7K4-BpCJOi8t_"k+Y<LqRhXT`OEE5$G%,3m
%E?(m8L4<U?hFo66H@R$R6p_eMV[GX+[ED1E@P:)PdqiU;@(["7`K*u1_g(d4.Aho'%03`#(GLt5$:pOB=S<0cBe&Wi$Dp:u.+.Xf
%J[Liu[.Cr/Ue$XsdSq^k6C^;BW>M!kRlY)(EIn`D,Ap:"DLG-H5f\&[<P!oRp*+,U$&[1U'j34DLLkn4,04U+aC:9`,ZOptUWkEk
%TbCYP=R^&P&'c#2+K/D]=@Ed--sWQJkoZQ7dA9J+SkPE4Yprg`MXN/j8a,ig#*A#AAP[j_M:$2e`n?<uHnL!f-:`J;5X#GUA1]<a
%d$*0tY_(h4Y/\ae'"t+[#blUu($R9C>B3P)!b4[dc^keqmNQ>%+K"0f<K$'Mcj`-<jWg_@I$!qaK38n"$JZKN#^Y''$<p.Pj\uO6
%!>@&rC%6sP84dUSa%hqOR:2C4\l-j%k9]KlND)W]X&2^&3[dk4nR*4pYB-279JA_lD&jOr(a'n%3G"JR=i<K`$q;BBZaKAC<-Amo
%V+EQc!`,q(?.(G"/A12bR5#c]VAAlj.%@7]:DWY1<(N:alR8.\/tTK2<d?7_.G.^T^s_HkJE94uj@GB#3(gP8<dLFs27rilm72]^
%763LId?EPC,>W?obYA4\>8utm3$GVo50oCnbj%c-/fmN7Ce`\*@r"pZf9'<^VMc)8DX$85'@hAi+q)t.:E61)[+fE.'9c5++g>N-
%;RB'+$nr,N*S0^Vgug#lOsP.c'%=a<!;DD[`1:@;GEJd]$k1Q=(YW,t.FX-^&H+6s).c([=4MqeT_NE?O<M45?uT3pAfHaSH$QW#
%*8.I=e!Rs9!gn1TW^L+gA8/P(^7L(e7M1[e`"X@98]N&)/$VM%C33N3n60eZ6Ph,)%R!'iX&O:CnHDO8r\`da%US\-7T<[89]bNu
%PIVh5QW07,Pc2\2gf#tqXN7e=_L/Mq-R?Fh&X9?Ld`KHDKD#1ubB:b)AZK.J+OgE:N:X9>2cF$notUqh)KQ!kofMKFUV(,Y4c?Z3
%=4`fSK7[!^;A"N1c$JF6N+F0JM:+BkHHl#THC?Y5bf:Hr9dQ)XQQH"%JZrn%$dbnc%k0"emq=,TOcmDiTLDpVR'Z:jd]6Ojds:IH
%!L=\\25=_nj*$881CKqN@8@+3`@2?3>4()F<gf:7)3'#'V's/g:mXsZ?:%ATa-MW-$N*h&RWWi>HU_C'?`)kPZ4,7t0q(PnEf\<^
%,<Gj-FoMM]Tn?$p@)e43@#K_2\CQI-2lE_iAd]j8Pa*cJ4J1C>f(H<X2fjAj/&^Q4BEBa6;%'$88<mY+US'8\8SPN0Jn4=&Og(<6
%2e):\77rlKGU=qJ=3EQsha1);6rGblJ,tY]F*$sV"/rY1TftZG"Vj.;=A$k;arL8%2@oD*;M<F.M@q@@m2l'Y0c)P77t:bJ\/C7.
%;_ZD">.[F>Gu^q-)J=&%[a8n1S?W)1bKU(JRBj0b'Xoj$Zg5=ifuZf(7G:aNOjD'sV-G=t(P&U76Y1g!C*Q5!<q@j*X]hupWZ;5`
%Z6n><($bVqHaBf:lB=ASTrLA\W7#`K)J$3@ZqD)^H`>/EA5YG<FIf+VkiDM`j2>uu83rBK>k0QPk]4M6+_h[K/s3qiG$0B6U+-gi
%q,E0ng<dW[cuWI/<Y8;p_H[SP$F7BE5W*Ee<jYdRP9of+L.Wr<?/<ZF5,o;%_3Pr>S,7GmiZQmJ:TOfonX-I+,-2#l/rB5[LC9/8
%URFkYQp?;B?lntAYjO&1&R$9K.rcsABJYjpPZrL5B%8j@9iBN49t)]*Wj;^::9BZ3)JHU4J3HBK,nnU*/i+s6TPeu%pK@^@7#f)l
%DGO]g9:\@K.Q`i/@:N%:K1iW!Bi#MoAJR_$BsR&D=M6uXgLjcR*XO6C#8m,o@+O[sN%<O3DFm=$no7I-<n77Df"%)IDS`'O_1klZ
%BiP!8kTR.(U-,6RK&$\,QFu''[$dks8lCLURfU[V2L5rD/1fBgmL4t4As4t!l)s@;Uah>^9o\u]MIbVeHljKCjfJp3c4(1oV?TC?
%c&_E<B=F:u!_p=m`W=L6:b42r6!Hm'3_Lf=ZCU='NnNsi7;u^EX*2^g*W_YPhN3mXd/^:E<l<,i!/=2G)p4fiVZH@N.V):S'H7$\
%!*t,g(gL1("JfOiB99g)f@:QR7nP\_Lcu/^1gMf$ge]0\ZP=](]gm3aT`RE8$pLLuaV/(QTRjbICQ"nnHs%jdJ-Am$FaHi\-A^/l
%(iTJuXR6he@Kn"(gLM"^ZagbS).4%L/B-9V+A$Z-K#&0'H699&9=[8&0X%hS"ba(_ND:-h#nQ^!P>D[(pj49Ra`0W5?rEl9$qSI6
%+A=qW$41[!jr4_6'kc7!$E"><!5^apn0t3[8dWJpP#\@qoc.<g-SK?j&e8"(U1*._1Lo`jB!Q/T#mp2o^^pY/WQP,Wa)W]mQ5i"R
%6'7lh9K4PbHPij,Ub/^n6F2b=1%0kmC1\+"8,/rU.lWYl##0a(7aq/s0]pCG7,>S[>O3>;;d*b1F%=WH#i]j8j->uJEnPgc+:E]"
%l.F*(E([?FJ8qmsaGb9\,^Dd_hP2";Zhk&.,A\_@@R=,:E'b"`Ek4\#FP&mS4#o$<OjO/TV`s6hF3TH/+VuNtkh(Z])H.>PiDM^Z
%$b#%5&4+lgkHHR?s%ousbYNeR%FTtlkaU4O;GVj6!jZ\Y@,[lYPS8s"pnL8"@)B!3KaEXuU>!`baJKas:9DamlRc1UlhJtE,c+B3
%J-NjP7,6XH;5Z81)9<$s"dt72d\W1^@373`(+NZ\9"n-.NS>s?WDINNjFuW%:M9pmY6n1j`*"hU/p3@&6a1'pRLI!fYc?@IZT_`;
%Fq?3eGl92)a78Y>H=2603#l6=47(4hQ_jcE'Od!RI4,p^p?kXP?%B2rCsGq7:'V#QVa\Tu'*iq#NtDFFW)"/iY&a5&ZuDZf;r)D2
%!6DSc$?F?!#/0km3A4POJ0B+c]CCT>l/V0TFN<!s\"i_/_lLs^/p]Ub_#\n*RG)56%O[F&O/<8i0d))lp8O4217ULFP>*b,H?"*Y
%@-.#1oi.,S9S0g3B5]LX.^^K)q-8ZdG`A[)crg!JoB@#"T_aq-'R^3/GT1.=HYII+mP.5*9T8[S`i8Pi^h?\[e@I/k<X9$n`,jju
%#gjP&+RZ3V.p&2BJ=0`q!G$t6#+_4$Z:6^[1R_4Y<2T:WRoH9)Mc3f@YWT1Sc7)koIu_qG)Ve#oCpA?mNsda?;`tZl(1ehc2/4d^
%2!Bn:GR1:CaUurm(3J0Rq;ale58#ZRfV]5AIla2%B'`;!=YihrS[b5dN3Q32O\8/=l-u[A+AO*\UZiMGHmFa(-47&N(;Ng:aZO,!
%\8:FA=od6mQa=__,QQLQhnVq-VX1[0(o]YZ6O!fY7`pZk'*(2,SFbQu/d;C=\cY+<W`5,E@;rq2D)IS6X5-iSVQ[p.0l7[lO(JB-
%Ju!SLHH4W:.^YqK;?Y'a.f_TB7nec!SBHjgRujoU]122862T0AYLg?7B\]h-1@%usP[:7h.J*Z,VW8Ar9G[6$`F;Su41LA"2,qD9
%[:RTSi;:O#.8-fN3F(H\e\G9!oghgZ<<8&E(9h'T?G&1;[2N[SbV(Gc=,GH1FV7R;*)7nGQW4A+:up#=V+ST5G=GP6Q,l?#lMWbN
%Q6]1-Er>FlT[M2diDuVQ[;TOH;Uo1d:(^b:K=s(N"JVc7-5tNIV,5fGdH.\I5?EBGl?FV!-+WWW,F?eD)k\]sYgO,h+XBlD.)7$u
%a""O>@jPi2"G^uXkfRkW.2isdXMLq87^u"O.o<mUQE*W\8=+41``'/08<N<u)&-#<;D,"[Ftmf`-VBZ0(M,96>$DgKA5t6cgTlWq
%@^$JE-_OB5[+Ga0aoR'IO6/!LjAngojF1=<_k<f!;+B2n-OApO'-n.u;.Nq5\:P+:+!3Yo5[RACQJtfZ+Oopfk"P=X/u&ROa,#Wj
%?^L;?<8H<n3>CXWY1m:F`),Vf^u-uq-g'ZHR>XWZVp&,%-rgl#.<D=*Y((9M<?nG.%SAT"Chagg3\cb:Z7RIQMHH48mn;^j`(VF4
%EOoW.1nobbMFVBW&M('/8$D)\ifc*qY+5PemR?(Rn&#13j032uj'o:@8.7,S7B/o>3fp+qUn=OH\sf2nG33G,Tcj2H2ImA/3#!I:
%12mC7,\=R(c&-3!L!<u.oJ"m!L_2/6PYuZA==L3O!l,r@7<scBj`h!0`DY']CNAt6-+c$LV98*t0E./!%r<I)Eh1N6.]C%iNS'#_
%BUVdFgK.2&?=l)QM,d#-D;t43#U7i'/kKFZHKfa>*_O^?\d!]OC2=&NW[oCY]p48uR#VUnN/g=8J]Ce@C1gSE3/(9U.0E86!6QB?
%dmua),6?K+==c'm4_e@hS8g3gjMhGOo2,k"&bQpm^brJ-@`;3D.h"[Dmg*S?aEK-ClD9c&g2Lqm#moZSFb%$Z*WWPNYABD%Tj3_i
%qGYOAQ3Z,H3?qRJ<c%udbp&?X`cst3R8W=tq`Z>s0[YWMW$3X4YbR%!*1eTh\Lg*MDRG$qO[*?Z[HSGl'.p[e?16k,kb<_9Cg!;^
%(/RMQn\#qs?Y7DjJRd./Zr))ioJRI.2gr?#%l+CCj>J:4"tQAb6P_7IP%f7dnOsYXBusDc[Cpq4Q7T8"9GS1*0#GRu/)D+f$#me1
%.:[FH[(OC"?JB1MGl^l<R8)8YR9UZ+GT`N<h)8XA>+(UoJn?khflD[M+!aH4-Oh%r&eQkh]()lu7.A_N:L3/$+NN?g:aQW]n/u.*
%'GN3CA8cRR_gr)\V1u:+_qF&r2S(>]2,,e$7rn<:cg;u'Jf&$2M0,_`78Y#+:NSa?I%tSX0O#()n;RRRi`O7CK$$XF>rE\+,%sE[
%L,/'#WA]LqC]kto'.YHd1l8]2B\JM=R\H[bTd,=.N^ckp5Uu+XZY8Q6,fUD)8-NL@48Z/_b^:G&<P0m<>U0Oe8mYl%nsYeF=1;h\
%WUjR._hB':aQe2^\qs`c=G_&k6p"_20r-f`Qt1CZX@eH5Em=#O/V)q^)6qoS'=re^^WG&!l5L)S"a+(1mbn-hWj4L7E^<j:Q)'@f
%M]?8/bn6lbWGYkf\->di7lEI<7Vj5gh'LauhPtX@F@bD)Y.<WeWZ2.TCa$@&`qX'ujHA9/,.35mY#p7>C)+]:fm-*IaCpu-k6m+1
%<$/tC^=a)36ENf[UTN1FJASS8^l`hW]X^muUa#n5(W/tb"Jnr!N:F)7Mnd\[Fm,rlN]*'Eaf1oW3_FO$kHMI2I8Z?8eW:Y)"[bg0
%?0)dEHic<#S=&#1WM3)2@:HTR:7+J"pp(B2/f1O$AtCB5Z1eFua&,#8/;bPqMcsm60Jt0"j5h:.L<kQ9H&[Zk;'CK<']U$>>b^t,
%$D\Q172#YZk`;L0Bl"$)Cmp6HVao(^b>FTTLHs)&Hefnd#5d5o##FX!$4X6L0RD3G@-a+YVZK>5P/\1?l"V*$WB25s8@hDEY]?A?
%.T`s_\-#inkZCI5*0FY-XB)L%GSt<,_mdoND]K/J`(T"1*Q,I=/<'+9E/;LrGr1qpFVk><2HH+"A1+#Cl&&pPS4"4TRp.jk*=4-C
%K"/[Wd>:!8`,#njiM`cm;QcrCF(Y`&%MXP]qW'g.j=2%McmF<EP!oDB?1^eWA<E_Z`0\5Yjip(W9Hfr`PqF;b5%+l2jG1i-RB_i'
%VR7Y:ZauGo67@D*X<Wao"!agD7L1-oYn^gW0[,!WCo^d)F--XeWq$lPr@3*gRM&h6;2M-KJeA%b#!luD,U(l%i_PhkG&sbSMB.#D
%UeKj6C]e$DalJ4]KZ/XGg?A>oh4HY=E'!M%[t(@e:B]G]EknE2U1jWB)\mng?3\cC*6\Ch?g<FVf2ckn%uig]O[Bd!_k8cPEMOs?
%]ME+eWBdbE/.R%=eKSWZM]/ZP$-kdd-aclrVkT9W2NoTK@,b*Rm,#ZgR>3c0q20i82AA$i6.FQ950c2BDa,okB9UqT-:O'P45!WC
%$lU%YC;eD*hmT8n>\0"8Ru<AGFMuX0aR2a8ri2X=-?>(\fB>s@/)LJ5aWA?SEZ^91`/"X>Tc:VOqrEsZisSXf:0CT)QSMoiUWaEu
%6X9(*$<1:0L$2`#GF#.G224%je.\`-!o(eToBFDV6f9('f:uCAV^JQ@j8e*";F2@:k^6d@b/?$kPU\-c01T1U-kJalYZnWU.'T]e
%Ak^(DRDer!U=]/GH@H;R.k:oqTTQThUB2WYA"r'&ZoM1('?%[;0O(NHVGfu;[SW*RBT7OJ_<J4uW/oO11C6@5V'(H@I!r^0NrNE1
%K)r&!GB>)rDBf[>A@5,[>&M8W4_enh@SU)Jbn\mC^/D1mmuZ$Eb8M.C;^2q\%,-00a;-gC=aWPiIRG9-gfQhPcX7K56mX1NgnZ-s
%PY0go!3##a$u1:)9ps\GKW1)=mh)\M8DS%'bO&`8)6.4gAGQ5E$e\u'&mP_L0?>C?]I'^:>n$?Ze`V'4-Gag?Ji[l7!Y%DTBP,UZ
%-#d-T2C8G?A%]_ZPHA`t.c$nR&sNF+jsgZ<j9m,]]]gic3ar:\*D.o>+\jZ0bUKAF-o/fk9oiT&A/aDq"?cUT4d%$JhGhU+,e#</
%;M,-B8:#&PT5i?p>GRLbpuIMKWC*aPig4"]]M2AC>7q1'M8hE@HA*SQ9/MU-e96Y-LdLKR/&;Gk`mE@CG:l?Q.H!*L]S+-k7!du#
%(jPX])l0bOD_@7*>ABeN9S3^4%LZXU#dRA15Wqbu,2T9'PGo;r4L!W8?rHA3]7fFOoC173XK*P<'#ciba1r;M83i(\4kO5ALjE7<
%YQF$(gK)YWDSVu=1`EIXKnQ:':nike#b.b_R''ZJKP(lVPRtbW#_tpMW/<7A"IHK#i[USP^<E*O?=gr`//-+@_>r_5GqZu>8pQ\U
%D*8_(CkbQt&F,npI-Jok)4.X)2H+6OU7RSf<LQ'O3S&L&9*bRAisc#1iU@gW4J]KV!/&>:SZUupJ?24J0H(qmY^teIpd$O,'P*+c
%JB?pX,6:!PJ^LM:<9p&@I*WMN=b2N.imF3J"24n""feF;dF)N\Hnc4sHIB2ALE4Sa3dFc)]b'Pg`3Q>pG+Ag;@s$#Fe5Rp8r1M7j
%N&pUlr:G`-\#24.^5Gc)3*@m`-%fO;!"i)c`CES6Cj-M(5JCmKJS(e&%/bWEo-jZoR)kO0X=HiS<o+'PdJT\"A7I&NUL9@jEm+f;
%HK-i<`s7PY!]6HbHf.d>hu/(OcKMk^NK/'rr5g.Rg_M#Z);h6?k-<>n*9&h(CCYtR4\A8d:$5o0/V.((\dSah1idIK:3h44id"Pq
%73al1:F*UZi;7u$?ui/7#TB&QkiSj5dmLj@9X7c=_N/XYJ/4Us"hg=T^L[fmY2P<7&WNMYQ<((pjfm_/$_+ap0*C-dVSOhq93cB6
%X\!/&#/,rG>LCZrOAdicWnIYjq-b0Y:rSbJcm6Qc&hq=ULQ.@[MGaj[R#^8o.Z1."dp8"s-qFX6e:8bI$S,7dd1-C()pbaj=8hCb
%gIe]HR&rZ&+2QM=O5rL=?suuQ%PH2.O^3A(WR7Gf0!?@5@#$QsA#s%&d+&K8#+\G4[Duu=Fkp*0L6O-c._k&08Wi[e*q0JJ[ZK,0
%M;\ac=K>5a=i<%8M&b!_<$GOq#=;dQajk,GmV/)g-5R\/+t3,@Q"4Z`SH+OP?H>knC[mub=ipdRH<A#+i/hU\gA&erCrqt"PU`AW
%)8fofhI=kQ`G13TXuoH!XM@/pEeuI0EQV1):qB4fR?95C&?8tqDCG9OQM@<m^T`hl7:*ZId@n47GB&!5dSi)I.PF)a\.Wq=#KY;4
%pgKWdkQ4;S&,jF;InXp3Ar!KM(%[5Q_!f0/,?r=lO3=N6S_dLEN#7dA_+lc8;Zj09!A9EQ?7/@<Co-(.\Xh!tUQL/W5QHme6aR?n
%@aWJ^KNXRriR>Sk-@!8J-2W0%J26XW=m=IE*!$;f]#_ttBgWJW(.TQ'\s!Hd98SW3/D5pW;A_6/M<YkGqe27Ih'T`*&]eki]J[VU
%nm:1-"3/qRMNr!qkN'0-?m,`f6%C.`gU9,]iX9j;mhQ%b8nGG*A**kt_J"IPo+k*=%*%H5l!tPZIL-#cPN\kKa"jnZZONs#NMnE^
%L1q_sY23b19-MjrlcD7_fV[bPb2nH#Ct]Z"pu"7cp4IMWs5:lTJuuJU]a4qTdf@>.PRAZ)G_=,*JD/4V:-95kA.8ksP6_NbYLbof
%"M*Y_h8r(sVfn*<@nc90!el89.3_[2q/FNaN/*V4=5kQfcB^H7_XW;OD2Z`i@K*Lu)rEY+a7Zr0WLV\3Wp)GD%p)N-C3(=m#4^[1
%lu>SuPZHi(3'K>X25B2hZkB>MJKm1(1p9Fpd0(:c06II.^U'?Ol!6Tc`+COhBP.EO8R-eUVOLAYrp6e:`>,$K#/MHCbE<71K\go2
%S\R43.0n;b5K`[^PoM2>(&aa!iE15&M=:F4$_qE44JZ4,:=1M2.%)dJ36D>=j/k;F`&Z'#BIf8n[KC=,X,&ag2'*)$)-'f@fl_of
%P0/ku+\,UB:j"O\YH3aokG.fIVbV(%-n;:/81P0=koI^Rm`C-p56J8Fed\Hb/l#%'dBX<*63J.cEeRDDE$/b<1p9:tZ$<h>)LgX%
%h3=L"%&H71)/Bf:0"$f(PlNjFKEDq[",M)2oNMg"?KDa/C(?i5d/*efT.)UeL!ur-1a-5l!R+P:MgAK<L"M_`(;n<,%YO"NI=B#O
%"c)8[H$\1uI>KaW$RKM_i"4_M37;"e74%4A'^;pWQWW6s3p_4iOCM-[Ua.eG'Y7_C,$ZCl<u$9bO7+=\4;;I(Y8t"Am.0;-T&Ek(
%Kesn/`It?F_u[e'Y1mJ5\,kT<VWZs3:6ie$`P=KZeBe8<O\9^c>?4!h.9m1p+R5Cn/:P!uN,RMA/<Lja,A"hQmRUKWghb)c,&:Cp
%UTZhRSkrM6&ILO/BlsbT2OfE3k]+d5D0X8[,cXV#9bpK5'3dZ>7([$.reR_EbG+aC'7X"i/deg:UZRXhY,J6q0!Wl%:%C*Ll5#@l
%RmR'q:'+p<Ef!nSOl_Qc[Y=l)3V`/8X)9SbkiAJR)dqHhd."93SlKd=C%)p&P6Rf*\#aGn6Q4cYQBdiV8!E=4[ZX3Tlq2X>OYRgl
%1<?c5a_Fls>R6WrD#0p3Bq]]+D!)n)H,Yg7EEY;Nbl=bD1]PZHehPi"l0$0,s6r!-o'MrI$iM:NAaFB_;2#iP$,+Id6k_:pjMc[B
%"-n52VX4BD"p^7Y81d5Jh+>:YdEL<T6OSiY*\7]P:(nP./Js]]"rN,&!>[UqmmLaj(?5C?aOpF?9X?n/_sn/AH&C_MTep78-0p_D
%V2+IPJ_[+g^@=L4FnbFm<Ttm)TR4@p,$ZWH!H"or/mTN:,;S.DW"ZkAoGmJ5'JRNZp3Eef?T9O77`=oQgmf"pT5-SNG\dWtFE%#[
%<#cS@E1e*W!9=rj!641FI'*r((5GVD"UgF:PqB^b%""$o3n`[<DeSEIY32-7frNZQj2fdfOD/[tNd^'mCaC`G(E1cWZ[+GA9l"hb
%p7OcLQ#8Dm!Q^;Rd*lab.:<cE!2(5P1)SQSKb#WA^'X1i0&K/``TFem!%W=Mh'\in7WpH4B/QO(D9dPj4p0j^63,$mgI$N;3q=C`
%.L%\kK\=g4qQF(^[a%aZ2$a6[alZo9AVjJZSmV;)LkebL#mgc3%l57-J1Cf`9p+UOj"e__WNSBKYp/0-kW7f:DO2.r,(:K7?r.4Z
%\Dq?%*Nu?:H'r!Gof+gn@Ij5/J/efrH/%7;@Vm9t%5B7KB?rGHZqU/ZX!c3;BsAM7,Jht@2S'l4[E+e/).N;Q`</pV_t,)+Rf]qU
%DI"Sr!,o*`o+UOd$H9'U]L\)KG\eFpR-M3<7P^p>-k+g#FKb%j"7?>4D2uq'!d(^L)P+eu9r26tW!Rc5:*Fs2)MV/V^bmEnPQb1.
%BuKF+H98#JN]gWE=B*PGA:+NA+/NZ7-TlaM(jQ2=(.pNQWO#_V/iN?R$_Z-'"&s9W,@1i"+@C<pSai,^Z;EiPNc\$&2D:7\$70_o
%*$,E/j/a3Q=?FSUh6&=f4GWrXZHCgM5XC6C2aLduDd[TKl>YgZGKIe1L.adL:LQQ02?jouQ3TY)`@.)7AWh^/8+H9JK^oBkr@MD_
%N>4Yc\PC[H!;g(_L1KkHP_.>(J8.C81[)[I;NWUp$$6GH@(_sIge:&<Tg]ld!#UJKjFf]l%D<"3-gH-&c-E&I"O?Ye+7.LfDCSeJ
%GCp4'Q@`e4KQkP]3rW`tRB[sV+\8_""mXen`FP"F6D%gTR5)JnlrS7>AT@B'=J\?b,E:<e7lEUiEV21S2S25BV7Lrf6Ba"t5UG5_
%!K).ekc#*G3LHYK$$Lsj!8.feY1D.W)Re,m*a5\#F;tHhn$-BH7?1`HbE[2WapE]!?BU:0B89#E_X&cZgod;4I>G_dZ^*tcrCg?f
%[$1ZkQco&(\h\uQW03,M5a<7\/_(CnAL6dJZN5S?pC0rj>(XIe<ATY&C%B5lURUTSW.@4n6h-\Pj<Jj=ap5q(C/C=OU95JR,rk]=
%Vd;s]#+1>17>f?K2qs]Y6iPVT^n?fXHUl4@Qq1]6*gQST[U\@R8d[,t/9#W$0j0FdB^8JnWP3o!8p+3Tp$sYA0`o\7W+-B(Q:r2(
%.:B//YS&NH9l$VOEr?6?Wdt?if*&*s.Ba"GPF*m7:a\_K`8o5l%9S.cK*`UeLqY-7OEXY(k'<EB!HD7]oS_i^NZY8tD$laFl53'*
%8*<g4&/hSmou+n<*'ZZ]p"2[(kUeIlAtfBLad_##"@Vm>5)$@_r(%aE!$&a_R+JpD0Gd7!Le0`PS!FM%>:u_rdBPc14NH_Abd!F*
%=\KfQ\VY-WK_rchm^DIn0$&0HXP0[t,sDf;0B@sF<P\sFN"7Rl3H1?rVi#*j[>-s1j8lRH0b^K?B"?#PfbG_=nN[kD._r'k*[JB3
%cLlMNg6`'fftmh*dgp+EZIgA!O3kD2;,:A*7:HAcpS-B#as<:A$\]0kWEqQUU[9u3)/9*0Z#*LZ0^IkL#7k^+19Gh^'Z$fi,4X>9
%E*Of\F?n&;q!BY?5=WifQe)m8`U)n6c_;3,ebk?IgJI8m8*,.5\RVQm\2)"l<@Mr9a*WEG+4Ql/Um*EgZ`/,,&.0d"QMP!hXUc[<
%G[O)7/!g<!d;_G=D*1#glQXEeN2VK]L58d.au=1TV,ttCJFR3;d];5e@rLVg>fO"`:ulA'Vl!gO1tWF+M.=g(p$0t.l=8J03ED>:
%&-gNslOkjl<FFE>E<l/`j[CO<rIZ-M_A-7bY3/^#a%U)')@Y<RHFkbg\CU^;O^",@6tB>J8"kIN^h$-2\46OX3q8jZ=o_"gj#Jg%
%9q^%@@8SB^d.@.RdpQuiN)0gW2J/S>DG3?Qj,P9aB*&<bG(+:_4W(QpL"_Omflc[KpVprEKNlpXdY5E\0JSL\'g4(lN#o"%:rur$
%T]s0#D1!D%Zbo.%j0D,@)*j3_1,6%rP0J%+DkJ`MNXa=FG+[Pd*:0E97q!AZ<u!sobB,Du6#[$fWZjR"?KjM+4`/2s^CfTDO*DhS
%`+i=@pq!ZdpMth\/^taqq9t1I.Z@57J8U_ZB9Fk;L(H]__gjZA52nVf*uII'oP33e's\W0O)`8D>[o`+?(#Np*@uaf5TGbZY4E&t
%GHk2p(ZHpE.HQt">S>%ImqaT#1$a^=('Z2DLB*U;_H7^3389ll7mf+sK2VUC*T'?@K:F!iQZ.$M(1YP<'FOMs))[7;*N:dSED/ae
%<fXe'5+<[+d!_I;W*4&K^(T]j3,0nEXGI6n+Da+>j#dY<!GV0RH@c?L0E@IqA6b&9%9ucN)\5eE!W&h!_/WSJb"[j`VF'_(+LDbM
%lD2(#J0EO66LMC'rj%!P/*)"eBMLjo!MduX0ZDQXQ`FODG7*F#Hp!&ACC]P=>7AF%TWFX.dDOVH4"`2I@\;LR5HNu>&BhW78dM*&
%(E4:_l![B5D@U!*MC?OHIP#3[blm^\Wi/=F5#'8bOuNKBU:b@i0^T?R.3pC,$\7gt3b+F]*X$/9ncl#7.E??39-ZfO-Nm(n:[G=?
%Li8No&VN#-!Uh)qZ%cP9CmZJPO9bKt-=5S.5`nB?P9)O?Q^$Mq_uTHog>Fl$J_+;KP1_1NF!M<IWKp/JnH0Q%K5a/kWX:*KG4I?X
%3XI]MR"@Rs!ui&RK"NZhW,DWKV20\iTOge7oPr?A-heRWL?Bogo@d%_S>#"GUq'%d$HeVP_!!K>20(FeUalGdRiD-`)R)8Y/=JYY
%:Zl.Zj,8Q*TlF?@FaPN%\`7<tU[^2AZ?HUa0r`X$j'\WgLGoR,0sE)'7d*jAit/"e#[\9cAf?M5asl@UpR)?g8Eo.7B>T>T<i;(L
%:Qu\)eLUeR\EPmT1$8a,D89QO;m4<*b6oe^*,Meh@d<><'9g=B_F5g8)Zl+2HoMRMR4_Y$F7$'W@$_t#?+c"Vcf:E+8]g_MV7_W+
%iE[.^KaJ3ZplH0Gdk13Wc1kJK_rWp0a7*>E$q5]a0mfugOO+KrA6fr0o0gMjTJQEsX*PI?(\Q[F=&8qg'mV4UK07GX!I^n0M?,d3
%BP5KpQU!R1U>aLI+.t_Ag?_P2VA19Ps,DGBcR)Y8h05[o&+>jIAtf:g>3DF:'94)iW1C2`FtusO:_.Xb''MeJ4_*MZmq5r"WN):n
%N!'S@Wh-emleZE\[5H;L!^K^P4t[U1X8p*5%)f%\N'O#u&2UZo+bnOqTsL(cjT'IYeSo^,\1m4"ooR!'"/q_S80^uC!3S?rJT+'f
%jU?m33?juYgq43>7PY6dqa*Y+aO6g;i5,8-e-\3kHiE0HcaJCPc^$_W,gQoT5Q1LNao5TT7N4A&LC2[SM5ti3a4M"K#Z;nCGd/H0
%E3DFk:DtP%!6)VPa.[gm<4gR&!5n%2T^oAgO*F?C.2?!Df6D@ljIH%0@1,E8g7h'LNQ7,#93nYZoM>R/b2mJDo+7SnFS"(9"/mpa
%i8H@p%EX9c2ldXc5>aFh1N4UtVZ;Gl&ji2>WONs/]u:?(LV!R71mZ<Rms!S!MqGmsZK8FJ/[A+7QJ.b$3itm'./"9BNEJsR#[4gN
%Z0a.lFm7YO1Jh0G3'CS0@YBThdl)6+EIqUK8AiE4%nAB*I.;+;i'C@Scu2$3K&=Su)R4FF#ok@lT''KAMjp//hB.s'mQslVA$K^>
%]<b(-RI9HKP#=/_WK9.4):4DBDoj3Z0Vr<;Sk\?%aHa*BPEj6^C/:j#7$DCAOF(qZ.;!^qML:3J_9UoGlETPC3<urm:t6V!\u;3^
%O3L[mhX"LY`5F8@M1'O_J1cHYaRh=))ZDt_0F=/^)(P82V*Y3qom_O,T0J5lNs;""Qm\.1QVm&E+qK49<3YuR<mHJ2GQcg+'\sr^
%ZOUsC)*fZR3j9E-Rp>B_id"SK'$T3XJh*%ZpL_sDn]2W$G#;:b@.Z#uVImb0F^W],"VuK+J0ZDG)'!X>N=h'%H:NK<q]Cp'/^G?U
%Z)`$JEYLg_gtTb^!BW.)h0D:8i9KM,7R\ppdMr:bg!:h2'GY:H2Qu,U1J$".^qt'XELc^V\D=MF6\[\<?s3Q[L4*HPj>KPl$GT`s
%/r1M9l#hP%/cPm6iV35WX7D5MK@#TZ/13^P`CemX[[q_7=*4V0^[GjJ7_Y#1_Ra4g+m0'C^:CuPCkH&YpP3s0/YYiNN0+fU+'YtB
%DfBT5V6_<S(3Ybf/crLMiX<;UnXE[5H+1%'HV;Im\D&\p-h3*N$k".bMlX5!&!Wsq>2_I<&%*N:Cg!qO,n?a;J-*;`'@G:SgB#QS
%kpH+S]SA8F!VhQt`hI$WDT'/IYiH]25N)iQ-36XF1N^?%IA"q_NG(qTR:*AO_"E/F'rsU49;aG/bXjMF*iJfL8NtYZaPOiOMg=nT
%,7L0$Mm+jm[;?%56L"iXa68c*P7\56UbSd<-6a'5=?@0L^G8F*Uhr.\ZTebXUiS9od>*<_LuL=raU7?-Ud3q-'^F;/dK81O?d#Sd
%o;iCRs4RbUP<F5)lQ($4mq%-L@9Euio4d0g8LLEGK?4mD3Mn#VMOHqOH91N$L)&CMEaG?mY>/qV,c$llF!,Hm,KhDd\C@F;hXt]d
%]t/?7[LCq&+-!Ja#WoWV#nA:0])YqcKm;]#qrn@B2)W\o&ord%eHjla-%.`D+/58M`87$Pi9c37,t]<ul+c&!oo=hW#Z%t3O6lGM
%gW:!<O/PW8UVYF0;[1l5s1i)!a;h+A.^Z!EQ0_G6TJk5\C`"%inT<oU=eI-VK3GQec-9?aOsEH'F"-`BYRr.7EsPP0<2aX!d6"lT
%hQ.^G<(aj.conDFk9n._Q;IlRj&B0G5JWet#cV8L!,'tTP2TGDr1:?WB;8*&,m*35*uj$20U,E`cRID]I!QOTFIU^*1jCgdNG7u"
%63MprI(WHG)N-eQ9XQ#glJVoHSE)Hc\.Rl-`H"9F>m1a8?#%cFCkE(GXg7mcTO0'TN5]o=WLVT(c!KK<5qk;@^3I9EKL?RQa?YKr
%;bA,0QSk$:8m:b,TVjLNRAsYUS;uCcnLglc#:?FjIaL45-hjqM)[_X.iDWt-noM$^esO2JFr77?$^@.;+MD,SkVnt,$=i66me*:9
%)K*m,Uj$OgWhqULXm?<ebTj.^75YQSR\l<"HO4U6YCS-clIS[I+3D6o;nq?"LA!A[kD[rn0Km<:*p0D2?cQ?*90/UJXcPPe!fMLn
%8P5Mb^("QXX#s/'@UQ:.TT&'uPf1?V1dtUs4<K`ki]W$RojbM%3Bql+-FO^t71dt8V#@IMXJ!ti;"cB%b'Fpc_k"rSTX$NP!N$n0
%X2C@5l\bnT591B+NBAEM"iu@o!c:-e*(9/.3"E:M^lK<]_i*mX\J\HhM*6fEguMM/#<++!RKdP(V`cuFN^Rc8l#bHAgnn4%QY&kp
%aZ-7c^]Sg`:4k1S7oU#Qn!EbiZKI#9Zu9mXE2&J5\==:6>XVF;2snK&V$DUd]pljs9d`r:H^%eOl':/me)C0_%Qgsdj]+LHgJa!0
%YG>^H`HIhqL#J4:IB9U``?1^3!sYi&WNbiP_o)mhRRR&Y:?@RQ=A9a9`U`aR#,+6!#GQ!"o+N<f7Yu0TDPJ*f8NR9"KARWV3=+Wn
%:I_3%H>=5a66S2`3L4G5];<=M-9%;5Q7P-]Y25s;_ii`XP)!ioq\1&@/91j#4c5Ac=.M;6>1Y+3I=l'1Yp;7r3074g?.rAZJpmcl
%+I#uGiL-955E]<G$&]Q1#Hhqm!#_)eSOqO*8hrEUOf\eS0VAFT@tj'1D8hshToR:l-^NW7e"@An:5sD?oS)tO-Z[.Up&0K*Ju:`X
%AmBSP!msP``fq><Y@%XMnoUtq!$9Fqi\n>a".5f>)`/c(DrbnEM"O\'eA0ApKSH-:d",&0!mC'OhFSkjJRs(L@jRn.jsF#aWWj-d
%[KqW0;Uj@V%W"$.TR0]F>r;(5BZbBRDNa/slp3a!d,M#tP[`rJJW3b?L+XL;Q[5rb71Z/e64rUs9L_kp"4p[Q:l`mM@NneCW35Lp
%FX1;KI1Q8'd^spkg^4UEB@?htU/f8A@*u0af2f:fAJKAu1PBeW`^STB5EMieDiC>V'p[K@<oYSc"?)>]U*<#e4XMZ#3.@:PUB%BO
%K3$Q6L!EHe=2W4'k+2&QnM7R9$Ff1eVfsMY+I,9V)..@h[M1.`2G&2D0L\8:&>Vs;:/DLO33)>=*n/qGE0(Y;p=^sk-a<58o#o2#
%Fn`iX<Jl'<YY(;ts#9Yi<#RcuKsV#7E)oNuCh]1JF4+'Lk6eB8O`WZ;=F+(OL'HDS.QoMnQP+Lq/Q)jK+R[aNs!6Y+-l+W5c=O&P
%:eBmWW<pN)X2)E[^ut"/+#8PGcET_Ukb<18#.U-WL'!5T!0!$\"Y;L^V4)6@RC2,;=%Q^ij;]ddICm4&hW"O/WlAdHnkc.r(YTK1
%!;hjaPdu8X1g%b4ZEsW>9<8n/_TnRD?r\C8`?iDN(4TEE+8@QUT:0.=l`lKiI_cUu#KZkhm3dsV_\oAj>%.o1%hhs:FF/a%#S"qo
%JZh`3N>?d/Fl9?kRp>"u`^I;uI)o?,M^lMjUY<U</1YCUOUf(]D:44l>:YlYHAj5;ncn?Yh3GH%i&jM_AB?gR+F/olC^mr45mn0R
%IJQ`=8[%4:,m-bP\9LAcE7OoKd[`XFd0]%.Gn@kU4S,kW,mfP"4\[ie/pSUY%,dP8,a#JR)cj"NWqSo)k4Xb]T=O>k6dHTZ)&9(h
%gW%qB!0Z,(nJ\;gYgY\""j].g'!,!K@fm4G<UB0$HOA:/8q=3-TjCo9C*WN0,g7#k+Us>Y."e*hp45_31HKQ(>oN`Xb^4G*X'0/5
%=+GuLGZj"eN^d,ed#7CIAtZ<TH\+i-H8_lC.e1Ur:Un]-Q^K\rnW)m[U&CH8D?,'cUTutqV)MK,1;?;pAfOs?[(*ELRrBO=KqW(4
%q\q)GZF.[";P.KUBLqu5X03`46n:MPLA@rM'A_),el.^h]LCAN2tW?R02i*Fn=RNOB_^E/*oWj'G$K)m+Q%*n2,X0-"#.hR\@>[G
%",MfQ@JR9D#09Ip.li<\1fHFX)dF,DPh!-c>I_[-.7u+gl;).k3e01QQ[L,2&20JAbbCkqW3Ta]lESD`[uct56]JWe:5B_Z,;:,b
%X[Fh;"P=C33jP5F1BNUoO*6#qK.:($ih=%Z2HE\-$25J2J*7&iDXN*\'$ddDoVcU1((tW<$jG1@r#1UqhUqs@6K'[KR#n<ibRTo$
%Z:GL,ZujK(Oke#0E&i*!S@m'BBoGJ$AY5$b:/7\lJkbrD[n_t^<"6=el1`qrGf&(CJlN&P+.d4p,aS?BdQsnO40h2$\1&*@CA%oj
%2GtN/:)6KYlj.C5<7VCrlUB2Y^CI?jX(9PRmF,4j1RAl1gE$u=;tI4YRO&TG<-+jU>PeH&>2g<cJ/M$*:G4J?X@_AN4,Z;"TbcQ^
%eruFFlWt"C]t%g=fi$WBU09"]DTY,'Uh(1)MbYko2s8W49]d\+N_GX^<=ssOC-#X+G?K[?<T9EuAVoIf](]X23`aF$#QiU\(0[la
%L6iGp$VbX-9_ps$dj1sT[$%BYNAHs^2UAF6pO#L50*WhDDX,Ye->0R`ZCI@*UUUhbnKS@bZ?<bJPG+JU"km`nB(2gTaIetB_m)jp
%-c]20#Rh1clL%025181JJ<kUGSWpRi5'LpO&cs?OKT4G<<rcAlGMU-k^sMo;D]VPg-L/)hUS$'tU3)5I"E_$S=@5QMENOV,Ri%=?
%TiN/I!n<(-Eq,+u/p.o9Ucd+UFH\\MjXR$:A)"m\'K2?pX9+4=(;4_J'k,@3%##cIDco&*-Ns]fLg_u+PU*9C!L?=?cSGh,8I9;+
%A_1,fA)r0F&!+W)Hea0*Y:7bNCQ`2_+t!B>Wc=@Hm:?C%]8VFfV*/j"p``8iPjtE@k9YRC)%YG;+kp^K!l6n?/aNR9SsJ#5\S@%k
%-9YAD,>XnE;HVl5hbj*u,""!7.g3@A1\c3O:)//XB$AA\_PiV\I7%A8nEu05cCu!nT_>,U,V]i=YMI5dc4/2:/mm]>ZX$tAd5G5m
%eKd#\Q9G!5Q?%Csoa?"+]aUGQ<&WPpAEaX?/7m^$V)GJ[Jd'OT:=K9U]0G2I`S=L<(P9kOTqL9\<%N,4>7*Ttn32EWgG*gCaB6nh
%GRXgO[i5sEA;c)FTg`'+P#I\+Y2O:+OQgqG&]U2gbq/($Pecl;[D7r*VRZ<kI%lb#SVL:UGsN?hZ]Y!cSeB%keTSe<D]!#\NR#A+
%3<lE6/lKL9l7K!iV%\.j@Ch(3>[c[,hI]]O&4+p#"71(7*:Z4UX+@4]l[2$mhEX8BWeURgKib7/i;k!$f.5!=blI&&;5U@\Z,]D:
%B+-OE^t,T+'NB+')*UV#X0;,D[("/C''3u.A::3iiNVY89A3"C]LRR>q#H.2iZ_CNQ43_iG\8n^'5*K$d)30TaOhKJg5P%mI<3(q
%7>CM<o;9]5OtCb=D&P#10HqIg#Tt/$4R>LOltZ/rP3[C-7sin<MEC's6qG7Onm^-BQM[`WNW;.'7@>7NSqo"nkCjlj]Re\`R;<*F
%-1:h<UhbSI!\h`PP=!)Qi,nHQ[G<8e4O7UQ(uEki@CWY-Au,8ZEk@Pqa%%_$oADXlj6+88[>2nh:;E)&0?onSr+912_UtbF?O1ML
%.npcu&V)EmUrR"!qoGqI?dt2<,/<Z:[f]`I'?Ii69=\*WkS_@&iEBB$_iBeH=q-SJF(T]YJ1/f2^I5F'14p$73U:+F6"U`&Teq!b
%n7QbTW]UANOqXL)Ep1+O+"`suKstO!-9>QVEX+/S!(t_S6:*ts0=9;`M@%0P]=l$\'P'N!&Y)\U%2H2r9I.;6%Lnp$$VILK?`0qc
%hqHJ1`Y#E0<do>Gj(9$FlaXSJ4.F20<XKHE5HG8%:SnI;94"L64Jm\cJfYppM^R!",KiAWWO]^Qg"&WuBqJCafVlF<eKQu<a^uBa
%mNcR8!$momlIq$M,OIAXH!7a;ImuBFrlL\s\`OnDT*Gf-o"l0j3oA:H2AMDrJkU<Wh!t[&2/1]TeP(>rSje8pcQ2XoV+Seq_2GU"
%ZM]X<`*C[6DVDP"8aCSGaOpe6"=2Q,i4VQ$`HOmnojUQol?Oqo[n,ld9S;-#H&cD\D=hH_BLW^BIabXsirpW'\4"RK^KU-g7%ES;
%&JKgeA@LBa58s<VXMk;//r$89nm%BjF@&@2:m18#ggH[G58_ArGoV!aRT/0/p5sul^UhU2$-KpK1^1n`X-q_uS#/r2[?!D/0N2*f
%A4M1,b[rO^RN:$)XppIi',nA`-jh)n!m!^8J/Q.mPJA<F"-a*1hN8!915O<hU*fPNSKKKd!(NaqTSh0CAD9U<L,R`*;0goh$tCp.
%8:[K\kiU^'&;6eoJ683i^t"--(n'!lk_kfO9,6GE1[0-s2DJ.XOd-sQ'5M:A$Q\%3p1[]W-C^Qbr$4$6gK)_W.O2`BmLC!&`N<gB
%Lu;#cKk6Z?[-Z#q'eRP?BD!#Y2V'HeJf\%*^Nuh$i5i<2b>:q"3P,jt]#-l\3h*4X:@9ldP>aS8c6J'7cuAANa#%R*gtdF7&X21h
%8)>>Z4dA/K1*O^8>VV^DfB6IegR;$+-TK+PhE1ua+),mCf/sa4^7:2u=!`D3amETAm$P%VDft9"$Ua[>d)3X+o$JGW]5Xj,S*!uL
%eg'XKI+Cj6WNlZZ:"nDb]bJ?P(ka)&MZoN];GdbcJ5C&AY"W/PK+'EueAqFYYe%n<ZX&:Ij&6*:n6lB#A?smtJg!C)I*I,p!f_gS
%j3XT;:n"k[Z(*m(ln`?'l=lYJW;>;WoXsu3E[eYGc'f\s+pdqW49;qOEd"_HlFG+[iB,2lndJ?$@aW7!*9POYpN;(5L_3j(gCM4[
%TP1WR57gnS!5jF$i'E:VF]LHmc)!d#QSRUdbC^Us8gCc69CrnZUO4?.`3SaD*1<i/NoZ:*9W)hKMh.@>d1R;l9$EAcS;BuoaTpO8
%S07-.a[!!*oZ+Igk`2sDbdiS(G/'fLn3+U"=$!.gjZsC>Z82iNB`!Vo7@5R!$bVS!@";d_h(LT2$d;:NEDeJDeXk_Yq[m6Wf:nJ[
%lA]`(*k*e=<Ig?Mb<%%^!ig=l*Bfk-W9l)ZCmjsF>#P76&RfNth:C']>s2Mfho>5K6=&$uf5ADJ"R)YUMm!n?mc`MmbmX$6p[5nK
%jR=\,@B3aSaO)g#3;LtUcK>jOaYNQ\B=-+*C*^>0r':V[W&KGb0GX%qK696<Y*Sb+QcihL.coCCp3r>;NuoJP=5lK&Jq*l,01SnN
%LYKlf=JLNV(r@RCG"Vm;bT"mm?o#\U['Sb,1-i6?XFNHOSOZTNBEjhq3h?s(2HEphHXYG+A0U-X0Eud+?8AB5K6$,9l"/`aWB^Sl
%ZA8Lg/0S^q?M9)ocD-kLFT(Nfd4Q$f?JOiunW+,7&HskJLmU,>1"M;XE%9kQY^r-\%ZZ7.*2"Fmi0/pGi^f6:VD,D0.t\C@kPB$\
%L[lQF[@[r#W,Y87/@Z\>A7.dMLXR6F.`Vb_d9q.+N8f'^D%FUm)Q>Q-DWqC:jf%^'OA9h8Wsp?^&.W`kE1o:VA\unke4j)38q>Z'
%XA+g%)$Y/=$!"k[N.MqhoZZ(FJ/O[=Nn(N`QWqGo_IGGb4+u)Mc:=9?7HQ8n2RmEWUbbk!@f&Y6Y<n46iO[*87Q-KI,0ugQmkV_C
%cVj!o@@ORj^NicrFl'8r5p/\pU7)3g#c>W(X`%)#,LN,hSW`m\Vae(kEnuLWnqu[IFChJJOmXOu](th/Kp3@2F\2C``4G=m\M#,F
%NKHZ50OdaFg6:W=\GfpT4KZ<l#5D<DB!rtB@M'Tg0>kFD6P&PLO.\-r[X/MKp+$d=+V$$!NfZ2#.c.0</.@V+-0!Qb,?#o]i:q(4
%SJ?2R^Bq'a(j'Bf[ff0,3gPY0"\fq/0]3_)b"2cSU4?ITpLt';J@0Xi_ql6(ZC4P[&!`%&r"JS)lPGplgM_K\=Y[^/g5M*4>S'rj
%c0HYk+-USK[XJ9NoGW@'j^]!tI$eiSS0l:T(M*FbB6Q#pU@t2^X,*'sC'&n5C5?\pXm,JjR2nkg"[ioI(Mqd'Hc_.&#)`e@IM?[+
%CCt53gKZbC7r]4L'U;]eBS2Vg;4%s'\<K<./qcbrkTkCl%TmA4@IT;4`d:K]dAa;?_C/#]Eb$9[4t-B]9&Pju6Tm3BIIiX>os![5
%Z[&!\b<ed=@?Hc^^&2k2/Wpu"F4)>D333KC!LWcLlp]-#q`pQkYBJ>\:j\hI7#cL@<rK.re^!3%mafAZ=fr?h1#uq"cpJC<mu-1q
%Nu`K%TZW.lA;q!I2KrFucUM5!D^]c_.%=A"VmcQ^:&L71Jrh:6XZZd&i_t!OndpiHSC%cmmrZ&Me%5nM.h3)FDD@"s<,PgGSh&d>
%NLHTZMq5Q^6Wi<o@PDXW<i%\$m06#U]"a#3d@e\6",nt:8W'>/%C3#1p(:CWfX/U(K.;CV3G;i+2[ca%nPduj%5Rs&gLVKQ9\8^u
%*G'.6&\rV#McG>8P.3\#imsqh3tPVuIb]FXMDf[nF;)"M%N](`Bn$hU^r(;lGV(Y`Tk@4Fo=Ea_;u7KIr@hDF^H?o)cG$"Tdl*Sj
%_BU``j'HIP0heeSKjYb/1JbjA9\X.ci)$uRqS_DFCY>0"2n*!$CSMAjOeF,SLZ8-'e]4raBI_/@*\s*X),&`Ia4'lDZVn]-8ki^b
%LcWj'o[gs]Ssk:k="q#Q[[VuTJ<7frN<O8&@>CIrD]]"_jejF=-U?srU#UBY_5V#VD/b4[l3XKOnD'c-6JR57Hdfl8Ed?CP1'GaL
%nbjHU7sSh&/r`&VAnXItDX'dJEJ6bWl<8YB/X@Ll2d+,*?1tO!TDdFaS%hO/+=)/Oh/qn\JL#(O$<DI%aL:f:U8G//VG)2]a/O;(
%^hk.4V0CD?kbDrT3`h"VIe5r^FhX0)!KM9&,3SI[-Dcmq&*a>AV_-Us.c;6A:"!`^^,Xq)YH]Dh:ite]>arXkdVt7h5nmGYl6emZ
%+O?F[lV!Cu`*=e$ZMgX011[MmiY,i[a`ZC3nRg=UZ*!+Q?#EEJXinVD40Ge[]SiK^aE=^6,El/=*15bI1Kn3I]rA9+cT3c.GV%jI
%mM#Gg-R43JB/2T[X(FX0V2YkjXO!?%c=T>gL7/+-)GF@CMMA';0l,/,Dh<kCM(;0Zc<t:DrA)"tCcZoE'nLD?'XN]35(?G3E`]Jr
%6VHCs95[L+hX,OTM[[R#cWY[%VQ'Z6InfKKX)_@*N$WVW.9SXIp^`m1L("XD$kG.G7I@`V9k]qMS`7;qqL4WgY$[Z?(r6:_F%/4>
%(5#K@AJ<e\B?Sq=3nP.MLoWW*I!u-^UR#PrEb@4+8jt3O"7u%sRT]g%CjC7nLN45;KW"lZVmL3:8LtH@@$(%jS^H(8$"/:f8iWbO
%ZXi2k0Y<g5PNN.31HX0h@B9t!`FB1t;=@WJP/8J9pr9l@m4'LeN:L-PpQa,0X)r2&hi&I:$MlPAG8BdYqfLB'!ELK$L#BV!r^MoA
%,<23gA1\mo)oi50c<^'dQ$hPe.1_6Y@b;CSg20AuVR462_Q',@CSuIg4f^BHD@UCH&@@dr5bC1jL5?k,1;Xl[+PCRnC4Hq7+(L4t
%&1gJ@l/`$o]o"Y:L%A-R.0X(7L<Vo3!f"A?jm)dq=h94(2/W]_861jM>5tCV?<IH9^R;XL!-]l9:C=bn-_guj:duioo9]TRf66E`
%l+i,B<XG8u$Kker,jWo;bp`kIr7^Bc$i/56-+;=3`UBK<KX+9`+JJ@obF#>\'0u-I=K(/C3uqW<lVW@e*t#C@P-j,Tm\PTEFnAf7
%Art`RUMQ>4P_LRMc<Vb_#kXkJi[QHLMdVA\@Jr"a)`d42PNbT&8u+gPG'/P7DH=KB8&g2!9:1#_(X5'A]$l/rW_*On;J?[bgpY&L
%dQqMFN"u$@8J$!)J5!Ct=l//^.+5Ri>s<\G&Lojnr((93_=6G$kqp/.7N`qfLd?^D_q5%4CR8>ULlj`eCMW=dn*uJd@>SPI\kIp@
%L>WNZ)PhS8^k@aN;k5:KGnV&8;EE"!$3t#r+ZUDiV0!?@(/EYgD0YZhQOsW"R2i^:fY)U&+a8RfSYN>DCbgcuVZaio93+XVRTMAh
%]YAQ'i[p(f`gV.@N.0<$"DI&.&o,FOn\m?QN<nLHm`*C)/:p#+Z9WNMZ6G'8ouG&4)T3>(;kEkmJFn13(e1u="QUcj7L9[+es20*
%pp:n]7-^QF*ZLciZCJAMJL$*i??gBsXh="*Mh"qi>0[il@B3[3k@?1O>HW@bSTC)tX.Jq9SaVk%/UU<mb\3<kor+*QX^TD3\EhXU
%U.phNj9(S`;&(TGVXTV0Nr`'MWT05[YOmI@1c&[;D%[40Ur0LJ&W3Pu[S\:EfH+jo3D5<67h<A`AZl/gb/8@p143TZikoR`J>)Y+
%6gCOppu]q%\'tj)>S>0P-A4D",RNTr;Bn[Z_;qtG2Cjb]XL(1#,**1jY;5*:hr1$"?`\BaQ;T88^>G$Jb4dBE>!YO0knZ\=bu>Pf
%lt47C.32F.2YuJ\-m[=><b_e_d!_UYf&aEX`Z*FMb8AnpQq==pAh3SPd!D(Q9QYLc#LN!L-kil$LKU%lDIA,R[CcGkUFT&f^g!-0
%\MQA2S>8AW1?H0Ycp2iQfTLGOCI>aggr*ebd$L&m.e5]ZRr$3Hi"uE-@-a3/5"J_c,NHDZa=->>)K#!-rH#5+65G-1#HS(rgmY3r
%@Y=<7_5:O>Ok3O<p&^JdjF29W;?nVPr/6hd,P`UTU>h2"X:*Ta1Z$+Ws0A@rkG:#SfJcoV(7l:U.f$t+Y>r'+R?fWFRl!sW8[rVn
%3E^V_a/?H$`\I'AqT\gI_J@ZOHk,j(R#A7FLq,6h_]l9<.`os70Gi2-.+--?Del>I.Y:Gpf1mDT`/\Oi?94YseJ69!E?Wk#Oh`T-
%[1GCD0pH$m(a2\R#R,YL6:*EKl/:js$*?X#UL*@-Q$mZsSYt@C#qrH^B3__7%?Im13m6`'PSl=$7]Tn2aY4'<-nu&J\f./>1k;tK
%l1IU<?tcl\h(uS)epb)@"=P!E8:H?'!pC:sYe*&o-O(V0;VRmhHi6MMj\hN:)(7XX8rM"IQRc#.MmMIn.XJKD"H@qo2`snRRt4&E
%\IhVD6BjQIm74C8Z>O@9hL9O8UKYR*+:9U9L2q(\@Z[P[mb^OZg:K?jAXC;W1^ljQe4nUSgq*agppRds29Vtu/^8Hr2d:^Y%[jfd
%:hmQ%hb(E\J6PD[;WFpL\Uh@ODmfD!%5:%md6RXmV1#/*cDY>[VZ].uM?%NA].0l?fDtH7_Hp,9q+'4!P8)Lb[Orck3n\i&(9b:(
%G<*E39CbZdpaPf";G68P>kV)Hq?aBO!,Y.;'0,q-Te;?-L+Z4'BS5(Zdc.gJO1#g9[V$U@5]p[lS8&=_ZYUj"N#iI16S:.:gf=%1
%FiqZ1J9pCc*q(#<$&0#mlOLtd:fm"X[$uf]\1Mgb%S/J\jl-?M?h!=F%8>Uh.',Ssfe-Y<7PO0hBo4tTmd[bI)^(>b^S0rc'>YRo
%_+Wpc!^k:XSPJJ5l(1=_Tho!eoK4L!%)pU*lA2L-D&#fWFL5!_2b'8HokK:"NH6A,[O:ijl."2EZj:8L(`d\9@Ojk2jubpAE[c<7
%p2J.=8lYT1n0$E,kkWj]>n3rtW*h2bGe]nC0cl*J`>P-)dmGgI"YG%Z=E]]LO-i*tUmS(7ciOOTSPO?@)]3'J"ZeC6L1L+O!-2.P
%B?VH21\oI\&B1PbB!+3("].!^Y,BkQb@<7`k0%C),qR$[;(NP")ecjn-G[tDKbONB,#DddOHW]+I%D$L2+f<]cAR"h'r&lO#$Zf0
%5;Db`h0)Qaj,*T"OUcnG9=]!lK)A7MU4=;/Qu'EF8F#,8JW4r,QuBc`4[km!e2bu;>uF!D!8t:QgoH-NCpdUA3>@F0,ohfeTdl$(
%_m=/TmCZ3JD*X@>@.3O4QXo\[8BU@G39g(Kf]F<;`,7WfoU#qFH32kO\CGIMKd<@R]akbeJDn7h"c$dqe8ONUrWXFPbD,,&3+0QC
%"3^8B[UBjtg7n&bj(75NVR;,J39%/u#:GOQDXI:VlZCj[bAA`2dn(7k-!@T+V*+J$,HHf:+IRiZ9lp+iHo(MIh[C+N4XH2L(K3YA
%`$e@E1_ZD9GEA0A[],9&1tTd$7USm<mjBZ7+F8\)*YkI/:>3&;:">`uQ=+p(I,pk.iL7]`9t%bg6%n6qYaDc%4jCjPOuVHolqU^5
%111M&k'QP\U>dJ'bD0JL`Z>5:CEDH;Vht\C+idsq58ouK>sT<^E975hDHPp>*$9oEYYj(3N!LADUrIGm[u'r-md>-V?&MO_JY0et
%eo3W=5n4!P(rKhN!W,?akKQnWpEiu1A-[iPBt)kRpl=;V\?/.j)71/=dS.i&DNEX*!V7h%>#dWW14FC0EZ>#7N\$LS`NZr?Va/OL
%lM!c\X^YEEm.Z'%!e\#7<XA/)<`Gb)Dk$3pdC=j=2SitNM<'WQ9:;K;VKs6l!6W1@dP1aE=V?G3<IGV?i_&-L9:[Q\<BW%u9n85F
%!;%dA--9?)BR$"Lb<20=1GWpaUI-?1!$d-O0dn7=b<[X#JMGGkl"Q]08Q'nr>[:tI>Fl51:a61*%(9sU4FkNu!EJDC/aD"\kNe@j
%,N[F;bH>+ua=RS["D`XRQ$%@f`ToR@N1jI_\pol48H99^rrC.sA>+`\HN8sWmD0O!<:f^Lh=%/4@Y^R=gYIAL>_)=haaI[h7P"#e
%jA,gc@KJf+"`M]mo"h#lloqt1Ll%>M-T3^H,U7BcBNkEJXKLd!/<U:e_#e9(\IkL%n[KYW]+L"p'\E8sOO>>^[oVSZc!ff5[Y&>g
%&5S+obV!JDp\(*Y:u3.XENiB2TmGA\((ut]c5HZ6$R11!=^Wo9O!r^\Ou>&"As_W&+pfC*@.%FsL(@pd4:H1PK4-Lh&^b#$mb1=>
%lY&;TXHir6*=lN+@QV@^3ntXgJrY4m?B')`JuiUUKNb<\XN"ER+?A1UipbO%(DF$V$XeL*iC->"[E1L3Gl5fU:HDt8Ng%#-i_7B"
%NFCVtG.O>J:EsOgaW0qZ9r%n/12%[IG]i,^S[pn+6;q*An>knu.QGPpKGNemMjgB@F>m-7.9TOMbW^-^'c5kKbL/=?cPG(Z3K=8^
%`\,DJpC7Q`VRoq8Fb5j$!>rB#cCc`GceOpoJ7P_=_i6Y&qQ'[,3Rq>uAK[-PO3Q$+3YQ(<Fl`RNnPOW/>N^TbP6s2Om(U4[L^AeW
%Aj8]?'Y)W8pTsPA9I<\P!@-7W]mMJ,;Noe>>;,$PH62kPq8jF]mb9D[6N?];U\49Fh`Ul*J%bX@5<Sr*='pFQg%u;0qs@H,^4#bL
%p%oi'rY)O.o]bOW5<So@Zd3]=qWco25J6mBgTR7KpkRHc]QsAQh:HRooCO,EfRLm_00X^X2iiH;p3H]/n(rNlo(A&^hLGI.J\QL%
%c*qTt^%a!?jep&3nL%3GrTWj'++L,b%e/TK?[VM3YMT6Ij83c0q88!F4M?.>F16?VlI5e'iVg6(^VRTINr8@L^OLEJq<9\_\]5eA
%ia:s7eN9G8NK0hMFAY#Hc3O(.#9NJLr;#*f+37f_U5AIXi\H?iPm$/f2TF@hKXLjZh.rOZT2/7tq[rl$h]DgkruTfW5IIE(J,8(&
%-TunVipm'Jn\n#%rdbl4s782AlHp/,rUM&frVkW.G9=T<,<sF#E7ck;IuImA.!kR]Z8k(nJ,K91?h*S\Y<Ln?E=X^BN<eqnYOt-M
%9TL6KKupC!*cLt7`uar4grF?)?Mt7Mr71gsgt6OpntqLO_drEVhUGnWN+YZ@1%rR:ouqjS,Pf4TB.lBDnGEYIHp@IN@IAhth2rf2
%/rp6er3MC'5L\Z-gD?jZIW3A<ruM,SoWPp!"%9E7d.E66o%CkB4atVr+i]T<1l&:3BG!IMiEA[PpgmNUG4b1p,VBtp]+eUtrTo4K
%d>re9L$qOh/pqGoXn2!gnB0LZrRW^7JS.L1?i$KQL[UnS97PabcWn%oc1A^:da*sQGFlLR+[12t)sH<FI.:<S5&`>\1t)4hlA(D;
%0tmVJ4[$gXb:rrllMnWrqSbrp@"3ICrma6GroVJ+pTM@1%KlD`Ish4X2c$X7^4#b7onPIj4T<s]2t,Z%n\`!5D]Vin]71$:PP,<T
%IJrU.Dnc/I]C5ak`t.WG5E>X3EJ:;d5J2:ArO6\e5OnBjRh&;5roMC+ETgn!q>)gh57X04mBHW]m^m]35QC_&\]9iQ?T[hrO$C;S
%k5FTfrp\s_GNl=#"Fofhn)"!<c$/:4J*'hIqRbYaf,#P-)b&DCUA~>
%AI9_PrivateDataEnd
